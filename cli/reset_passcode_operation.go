// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/isometry/go-digicert-mpki/client/user_management"
	"github.com/isometry/go-digicert-mpki/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationUserManagementResetPasscodeCmd returns a cmd to handle operation resetPasscode
func makeOperationUserManagementResetPasscodeCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "resetPasscode",
		Short: ``,
		RunE:  runOperationUserManagementResetPasscode,
	}

	if err := registerOperationUserManagementResetPasscodeParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationUserManagementResetPasscode uses cmd flags to call endpoint api
func runOperationUserManagementResetPasscode(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := user_management.NewResetPasscodeParams()
	if err, _ := retrieveOperationUserManagementResetPasscodeEnrollCodeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationUserManagementResetPasscodeResetPasscodeRequestFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationUserManagementResetPasscodeResult(appCli.UserManagement.ResetPasscode(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationUserManagementResetPasscodeParamFlags registers all flags needed to fill params
func registerOperationUserManagementResetPasscodeParamFlags(cmd *cobra.Command) error {
	if err := registerOperationUserManagementResetPasscodeEnrollCodeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationUserManagementResetPasscodeResetPasscodeRequestParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationUserManagementResetPasscodeEnrollCodeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	enrollCodeDescription := `Required. enrollCode`

	var enrollCodeFlagName string
	if cmdPrefix == "" {
		enrollCodeFlagName = "enrollCode"
	} else {
		enrollCodeFlagName = fmt.Sprintf("%v.enrollCode", cmdPrefix)
	}

	var enrollCodeFlagDefault string

	_ = cmd.PersistentFlags().String(enrollCodeFlagName, enrollCodeFlagDefault, enrollCodeDescription)

	return nil
}
func registerOperationUserManagementResetPasscodeResetPasscodeRequestParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var resetPasscodeRequestFlagName string
	if cmdPrefix == "" {
		resetPasscodeRequestFlagName = "resetPasscodeRequest"
	} else {
		resetPasscodeRequestFlagName = fmt.Sprintf("%v.resetPasscodeRequest", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(resetPasscodeRequestFlagName, "", "Optional json string for [resetPasscodeRequest]. resetPasscodeRequest")

	// add flags for body
	if err := registerModelResetPasscodeRequestFlags(0, "resetPasscodeRequest", cmd); err != nil {
		return err
	}

	return nil
}

func retrieveOperationUserManagementResetPasscodeEnrollCodeFlag(m *user_management.ResetPasscodeParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("enrollCode") {

		var enrollCodeFlagName string
		if cmdPrefix == "" {
			enrollCodeFlagName = "enrollCode"
		} else {
			enrollCodeFlagName = fmt.Sprintf("%v.enrollCode", cmdPrefix)
		}

		enrollCodeFlagValue, err := cmd.Flags().GetString(enrollCodeFlagName)
		if err != nil {
			return err, false
		}
		m.EnrollCode = enrollCodeFlagValue

	}
	return nil, retAdded
}
func retrieveOperationUserManagementResetPasscodeResetPasscodeRequestFlag(m *user_management.ResetPasscodeParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("resetPasscodeRequest") {
		// Read resetPasscodeRequest string from cmd and unmarshal
		resetPasscodeRequestValueStr, err := cmd.Flags().GetString("resetPasscodeRequest")
		if err != nil {
			return err, false
		}

		resetPasscodeRequestValue := models.ResetPasscodeRequest{}
		if err := json.Unmarshal([]byte(resetPasscodeRequestValueStr), &resetPasscodeRequestValue); err != nil {
			return fmt.Errorf("cannot unmarshal resetPasscodeRequest string in models.ResetPasscodeRequest: %v", err), false
		}
		m.ResetPasscodeRequest = &resetPasscodeRequestValue
	}
	resetPasscodeRequestValueModel := m.ResetPasscodeRequest
	if swag.IsZero(resetPasscodeRequestValueModel) {
		resetPasscodeRequestValueModel = &models.ResetPasscodeRequest{}
	}
	err, added := retrieveModelResetPasscodeRequestFlags(0, resetPasscodeRequestValueModel, "resetPasscodeRequest", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.ResetPasscodeRequest = resetPasscodeRequestValueModel
	}
	if dryRun && debug {

		resetPasscodeRequestValueDebugBytes, err := json.Marshal(m.ResetPasscodeRequest)
		if err != nil {
			return err, false
		}
		logDebugf("ResetPasscodeRequest dry-run payload: %v", string(resetPasscodeRequestValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}

// parseOperationUserManagementResetPasscodeResult parses request result and return the string content
func parseOperationUserManagementResetPasscodeResult(resp0 *user_management.ResetPasscodeOK, resp1 *user_management.ResetPasscodeCreated, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*user_management.ResetPasscodeOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		// Non schema case: warning resetPasscodeCreated is not supported

		// Non schema case: warning resetPasscodeUnauthorized is not supported

		// Non schema case: warning resetPasscodeForbidden is not supported

		// Non schema case: warning resetPasscodeNotFound is not supported

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	// warning: non schema response resetPasscodeCreated is not supported by go-swagger cli yet.

	return "", nil
}
