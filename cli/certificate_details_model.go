// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/isometry/go-digicert-mpki/models"

	"github.com/spf13/cobra"
)

// Schema cli for CertificateDetails

// register flags to command
func registerModelCertificateDetailsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerCertificateDetailsExtensions(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateDetailsIssuer(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateDetailsSubject(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateDetailsValidity(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerCertificateDetailsExtensions(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var extensionsFlagName string
	if cmdPrefix == "" {
		extensionsFlagName = "extensions"
	} else {
		extensionsFlagName = fmt.Sprintf("%v.extensions", cmdPrefix)
	}

	if err := registerModelExtensionsFlags(depth+1, extensionsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerCertificateDetailsIssuer(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var issuerFlagName string
	if cmdPrefix == "" {
		issuerFlagName = "issuer"
	} else {
		issuerFlagName = fmt.Sprintf("%v.issuer", cmdPrefix)
	}

	if err := registerModelIssuerFlags(depth+1, issuerFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerCertificateDetailsSubject(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var subjectFlagName string
	if cmdPrefix == "" {
		subjectFlagName = "subject"
	} else {
		subjectFlagName = fmt.Sprintf("%v.subject", cmdPrefix)
	}

	if err := registerModelSubjectFlags(depth+1, subjectFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerCertificateDetailsValidity(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var validityFlagName string
	if cmdPrefix == "" {
		validityFlagName = "validity"
	} else {
		validityFlagName = fmt.Sprintf("%v.validity", cmdPrefix)
	}

	if err := registerModelValidityFlags(depth+1, validityFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelCertificateDetailsFlags(depth int, m *models.CertificateDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, extensionsAdded := retrieveCertificateDetailsExtensionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || extensionsAdded

	err, issuerAdded := retrieveCertificateDetailsIssuerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || issuerAdded

	err, subjectAdded := retrieveCertificateDetailsSubjectFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || subjectAdded

	err, validityAdded := retrieveCertificateDetailsValidityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || validityAdded

	return nil, retAdded
}

func retrieveCertificateDetailsExtensionsFlags(depth int, m *models.CertificateDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	extensionsFlagName := fmt.Sprintf("%v.extensions", cmdPrefix)
	if cmd.Flags().Changed(extensionsFlagName) {
		// info: complex object extensions Extensions is retrieved outside this Changed() block
	}
	extensionsFlagValue := m.Extensions
	if swag.IsZero(extensionsFlagValue) {
		extensionsFlagValue = &models.Extensions{}
	}

	err, extensionsAdded := retrieveModelExtensionsFlags(depth+1, extensionsFlagValue, extensionsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || extensionsAdded
	if extensionsAdded {
		m.Extensions = extensionsFlagValue
	}

	return nil, retAdded
}

func retrieveCertificateDetailsIssuerFlags(depth int, m *models.CertificateDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	issuerFlagName := fmt.Sprintf("%v.issuer", cmdPrefix)
	if cmd.Flags().Changed(issuerFlagName) {
		// info: complex object issuer Issuer is retrieved outside this Changed() block
	}
	issuerFlagValue := m.Issuer
	if swag.IsZero(issuerFlagValue) {
		issuerFlagValue = &models.Issuer{}
	}

	err, issuerAdded := retrieveModelIssuerFlags(depth+1, issuerFlagValue, issuerFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || issuerAdded
	if issuerAdded {
		m.Issuer = issuerFlagValue
	}

	return nil, retAdded
}

func retrieveCertificateDetailsSubjectFlags(depth int, m *models.CertificateDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	subjectFlagName := fmt.Sprintf("%v.subject", cmdPrefix)
	if cmd.Flags().Changed(subjectFlagName) {
		// info: complex object subject Subject is retrieved outside this Changed() block
	}
	subjectFlagValue := m.Subject
	if swag.IsZero(subjectFlagValue) {
		subjectFlagValue = &models.Subject{}
	}

	err, subjectAdded := retrieveModelSubjectFlags(depth+1, subjectFlagValue, subjectFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || subjectAdded
	if subjectAdded {
		m.Subject = subjectFlagValue
	}

	return nil, retAdded
}

func retrieveCertificateDetailsValidityFlags(depth int, m *models.CertificateDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	validityFlagName := fmt.Sprintf("%v.validity", cmdPrefix)
	if cmd.Flags().Changed(validityFlagName) {
		// info: complex object validity Validity is retrieved outside this Changed() block
	}
	validityFlagValue := m.Validity
	if swag.IsZero(validityFlagValue) {
		validityFlagValue = &models.Validity{}
	}

	err, validityAdded := retrieveModelValidityFlags(depth+1, validityFlagValue, validityFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || validityAdded
	if validityAdded {
		m.Validity = validityFlagValue
	}

	return nil, retAdded
}
