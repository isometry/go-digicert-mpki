// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/isometry/go-digicert-mpki/client/enroll_status"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationEnrollStatusEnrollStatusCmd returns a cmd to handle operation enrollStatus
func makeOperationEnrollStatusEnrollStatusCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "enrollStatus",
		Short: ``,
		RunE:  runOperationEnrollStatusEnrollStatus,
	}

	if err := registerOperationEnrollStatusEnrollStatusParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationEnrollStatusEnrollStatus uses cmd flags to call endpoint api
func runOperationEnrollStatusEnrollStatus(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := enroll_status.NewEnrollStatusParams()
	if err, _ := retrieveOperationEnrollStatusEnrollStatusProfileIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEnrollStatusEnrollStatusSeatIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationEnrollStatusEnrollStatusResult(appCli.EnrollStatus.EnrollStatus(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationEnrollStatusEnrollStatusParamFlags registers all flags needed to fill params
func registerOperationEnrollStatusEnrollStatusParamFlags(cmd *cobra.Command) error {
	if err := registerOperationEnrollStatusEnrollStatusProfileIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEnrollStatusEnrollStatusSeatIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationEnrollStatusEnrollStatusProfileIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	profileIdDescription := `profile_id`

	var profileIdFlagName string
	if cmdPrefix == "" {
		profileIdFlagName = "profile_id"
	} else {
		profileIdFlagName = fmt.Sprintf("%v.profile_id", cmdPrefix)
	}

	var profileIdFlagDefault string

	_ = cmd.PersistentFlags().String(profileIdFlagName, profileIdFlagDefault, profileIdDescription)

	return nil
}
func registerOperationEnrollStatusEnrollStatusSeatIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	seatIdDescription := `Required. seatId`

	var seatIdFlagName string
	if cmdPrefix == "" {
		seatIdFlagName = "seatId"
	} else {
		seatIdFlagName = fmt.Sprintf("%v.seatId", cmdPrefix)
	}

	var seatIdFlagDefault string

	_ = cmd.PersistentFlags().String(seatIdFlagName, seatIdFlagDefault, seatIdDescription)

	return nil
}

func retrieveOperationEnrollStatusEnrollStatusProfileIDFlag(m *enroll_status.EnrollStatusParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("profile_id") {

		var profileIdFlagName string
		if cmdPrefix == "" {
			profileIdFlagName = "profile_id"
		} else {
			profileIdFlagName = fmt.Sprintf("%v.profile_id", cmdPrefix)
		}

		profileIdFlagValue, err := cmd.Flags().GetString(profileIdFlagName)
		if err != nil {
			return err, false
		}
		m.ProfileID = &profileIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationEnrollStatusEnrollStatusSeatIDFlag(m *enroll_status.EnrollStatusParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("seatId") {

		var seatIdFlagName string
		if cmdPrefix == "" {
			seatIdFlagName = "seatId"
		} else {
			seatIdFlagName = fmt.Sprintf("%v.seatId", cmdPrefix)
		}

		seatIdFlagValue, err := cmd.Flags().GetString(seatIdFlagName)
		if err != nil {
			return err, false
		}
		m.SeatID = seatIdFlagValue

	}
	return nil, retAdded
}

// parseOperationEnrollStatusEnrollStatusResult parses request result and return the string content
func parseOperationEnrollStatusEnrollStatusResult(resp0 *enroll_status.EnrollStatusOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*enroll_status.EnrollStatusOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*enroll_status.EnrollStatusBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		// Non schema case: warning enrollStatusUnauthorized is not supported

		// Non schema case: warning enrollStatusForbidden is not supported

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*enroll_status.EnrollStatusNotFound)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp5 interface{} = respErr
		resp5, ok := iResp5.(*enroll_status.EnrollStatusInternalServerError)
		if ok {
			if !swag.IsZero(resp5) && !swag.IsZero(resp5.Payload) {
				msgStr, err := json.Marshal(resp5.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
