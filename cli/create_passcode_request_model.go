// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/isometry/go-digicert-mpki/models"

	"github.com/spf13/cobra"
)

// Schema cli for CreatePasscodeRequest

// register flags to command
func registerModelCreatePasscodeRequestFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerCreatePasscodeRequestAttributes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCreatePasscodeRequestProfile(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCreatePasscodeRequestSeat(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerCreatePasscodeRequestAttributes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var attributesFlagName string
	if cmdPrefix == "" {
		attributesFlagName = "attributes"
	} else {
		attributesFlagName = fmt.Sprintf("%v.attributes", cmdPrefix)
	}

	if err := registerModelCertificateAttributesFlags(depth+1, attributesFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerCreatePasscodeRequestProfile(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var profileFlagName string
	if cmdPrefix == "" {
		profileFlagName = "profile"
	} else {
		profileFlagName = fmt.Sprintf("%v.profile", cmdPrefix)
	}

	if err := registerModelProfileFlags(depth+1, profileFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerCreatePasscodeRequestSeat(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var seatFlagName string
	if cmdPrefix == "" {
		seatFlagName = "seat"
	} else {
		seatFlagName = fmt.Sprintf("%v.seat", cmdPrefix)
	}

	if err := registerModelSeatFlags(depth+1, seatFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelCreatePasscodeRequestFlags(depth int, m *models.CreatePasscodeRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, attributesAdded := retrieveCreatePasscodeRequestAttributesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || attributesAdded

	err, profileAdded := retrieveCreatePasscodeRequestProfileFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || profileAdded

	err, seatAdded := retrieveCreatePasscodeRequestSeatFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || seatAdded

	return nil, retAdded
}

func retrieveCreatePasscodeRequestAttributesFlags(depth int, m *models.CreatePasscodeRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	attributesFlagName := fmt.Sprintf("%v.attributes", cmdPrefix)
	if cmd.Flags().Changed(attributesFlagName) {
		// info: complex object attributes CertificateAttributes is retrieved outside this Changed() block
	}
	attributesFlagValue := m.Attributes
	if swag.IsZero(attributesFlagValue) {
		attributesFlagValue = &models.CertificateAttributes{}
	}

	err, attributesAdded := retrieveModelCertificateAttributesFlags(depth+1, attributesFlagValue, attributesFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || attributesAdded
	if attributesAdded {
		m.Attributes = attributesFlagValue
	}

	return nil, retAdded
}

func retrieveCreatePasscodeRequestProfileFlags(depth int, m *models.CreatePasscodeRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	profileFlagName := fmt.Sprintf("%v.profile", cmdPrefix)
	if cmd.Flags().Changed(profileFlagName) {
		// info: complex object profile Profile is retrieved outside this Changed() block
	}
	profileFlagValue := m.Profile
	if swag.IsZero(profileFlagValue) {
		profileFlagValue = &models.Profile{}
	}

	err, profileAdded := retrieveModelProfileFlags(depth+1, profileFlagValue, profileFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || profileAdded
	if profileAdded {
		m.Profile = profileFlagValue
	}

	return nil, retAdded
}

func retrieveCreatePasscodeRequestSeatFlags(depth int, m *models.CreatePasscodeRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	seatFlagName := fmt.Sprintf("%v.seat", cmdPrefix)
	if cmd.Flags().Changed(seatFlagName) {
		// info: complex object seat Seat is retrieved outside this Changed() block
	}
	seatFlagValue := m.Seat
	if swag.IsZero(seatFlagValue) {
		seatFlagValue = &models.Seat{}
	}

	err, seatAdded := retrieveModelSeatFlags(depth+1, seatFlagValue, seatFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || seatAdded
	if seatAdded {
		m.Seat = seatFlagValue
	}

	return nil, retAdded
}
