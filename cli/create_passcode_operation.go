// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/isometry/go-digicert-mpki/client/user_management"
	"github.com/isometry/go-digicert-mpki/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationUserManagementCreatePasscodeCmd returns a cmd to handle operation createPasscode
func makeOperationUserManagementCreatePasscodeCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "createPasscode",
		Short: ``,
		RunE:  runOperationUserManagementCreatePasscode,
	}

	if err := registerOperationUserManagementCreatePasscodeParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationUserManagementCreatePasscode uses cmd flags to call endpoint api
func runOperationUserManagementCreatePasscode(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := user_management.NewCreatePasscodeParams()
	if err, _ := retrieveOperationUserManagementCreatePasscodeCreatePasscodeRequestFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationUserManagementCreatePasscodeResult(appCli.UserManagement.CreatePasscode(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationUserManagementCreatePasscodeParamFlags registers all flags needed to fill params
func registerOperationUserManagementCreatePasscodeParamFlags(cmd *cobra.Command) error {
	if err := registerOperationUserManagementCreatePasscodeCreatePasscodeRequestParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationUserManagementCreatePasscodeCreatePasscodeRequestParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var createPasscodeRequestFlagName string
	if cmdPrefix == "" {
		createPasscodeRequestFlagName = "createPasscodeRequest"
	} else {
		createPasscodeRequestFlagName = fmt.Sprintf("%v.createPasscodeRequest", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(createPasscodeRequestFlagName, "", "Optional json string for [createPasscodeRequest]. createPasscodeRequest")

	// add flags for body
	if err := registerModelCreatePasscodeRequestFlags(0, "createPasscodeRequest", cmd); err != nil {
		return err
	}

	return nil
}

func retrieveOperationUserManagementCreatePasscodeCreatePasscodeRequestFlag(m *user_management.CreatePasscodeParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("createPasscodeRequest") {
		// Read createPasscodeRequest string from cmd and unmarshal
		createPasscodeRequestValueStr, err := cmd.Flags().GetString("createPasscodeRequest")
		if err != nil {
			return err, false
		}

		createPasscodeRequestValue := models.CreatePasscodeRequest{}
		if err := json.Unmarshal([]byte(createPasscodeRequestValueStr), &createPasscodeRequestValue); err != nil {
			return fmt.Errorf("cannot unmarshal createPasscodeRequest string in models.CreatePasscodeRequest: %v", err), false
		}
		m.CreatePasscodeRequest = &createPasscodeRequestValue
	}
	createPasscodeRequestValueModel := m.CreatePasscodeRequest
	if swag.IsZero(createPasscodeRequestValueModel) {
		createPasscodeRequestValueModel = &models.CreatePasscodeRequest{}
	}
	err, added := retrieveModelCreatePasscodeRequestFlags(0, createPasscodeRequestValueModel, "createPasscodeRequest", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.CreatePasscodeRequest = createPasscodeRequestValueModel
	}
	if dryRun && debug {

		createPasscodeRequestValueDebugBytes, err := json.Marshal(m.CreatePasscodeRequest)
		if err != nil {
			return err, false
		}
		logDebugf("CreatePasscodeRequest dry-run payload: %v", string(createPasscodeRequestValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}

// parseOperationUserManagementCreatePasscodeResult parses request result and return the string content
func parseOperationUserManagementCreatePasscodeResult(resp0 *user_management.CreatePasscodeCreated, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*user_management.CreatePasscodeCreated)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		// Non schema case: warning createPasscodeUnauthorized is not supported

		// Non schema case: warning createPasscodeForbidden is not supported

		// Non schema case: warning createPasscodeNotFound is not supported

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
