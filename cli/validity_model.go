// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/isometry/go-digicert-mpki/models"
	"github.com/spf13/cobra"
)

// Schema cli for Validity

// register flags to command
func registerModelValidityFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerValidityDuration(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerValidityUnit(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerValidityDuration(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	durationDescription := ``

	var durationFlagName string
	if cmdPrefix == "" {
		durationFlagName = "duration"
	} else {
		durationFlagName = fmt.Sprintf("%v.duration", cmdPrefix)
	}

	var durationFlagDefault int32

	_ = cmd.PersistentFlags().Int32(durationFlagName, durationFlagDefault, durationDescription)

	return nil
}

func registerValidityUnit(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	unitDescription := ``

	var unitFlagName string
	if cmdPrefix == "" {
		unitFlagName = "unit"
	} else {
		unitFlagName = fmt.Sprintf("%v.unit", cmdPrefix)
	}

	var unitFlagDefault string

	_ = cmd.PersistentFlags().String(unitFlagName, unitFlagDefault, unitDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelValidityFlags(depth int, m *models.Validity, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, durationAdded := retrieveValidityDurationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || durationAdded

	err, unitAdded := retrieveValidityUnitFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || unitAdded

	return nil, retAdded
}

func retrieveValidityDurationFlags(depth int, m *models.Validity, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	durationFlagName := fmt.Sprintf("%v.duration", cmdPrefix)
	if cmd.Flags().Changed(durationFlagName) {

		var durationFlagName string
		if cmdPrefix == "" {
			durationFlagName = "duration"
		} else {
			durationFlagName = fmt.Sprintf("%v.duration", cmdPrefix)
		}

		durationFlagValue, err := cmd.Flags().GetInt32(durationFlagName)
		if err != nil {
			return err, false
		}
		m.Duration = durationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveValidityUnitFlags(depth int, m *models.Validity, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	unitFlagName := fmt.Sprintf("%v.unit", cmdPrefix)
	if cmd.Flags().Changed(unitFlagName) {

		var unitFlagName string
		if cmdPrefix == "" {
			unitFlagName = "unit"
		} else {
			unitFlagName = fmt.Sprintf("%v.unit", cmdPrefix)
		}

		unitFlagValue, err := cmd.Flags().GetString(unitFlagName)
		if err != nil {
			return err, false
		}
		m.Unit = unitFlagValue

		retAdded = true
	}

	return nil, retAdded
}
