// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/isometry/go-digicert-mpki/client/certificate_enrollment"
	"github.com/isometry/go-digicert-mpki/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationCertificateEnrollmentRenewCertificateCmd returns a cmd to handle operation renewCertificate
func makeOperationCertificateEnrollmentRenewCertificateCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "renewCertificate",
		Short: ``,
		RunE:  runOperationCertificateEnrollmentRenewCertificate,
	}

	if err := registerOperationCertificateEnrollmentRenewCertificateParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationCertificateEnrollmentRenewCertificate uses cmd flags to call endpoint api
func runOperationCertificateEnrollmentRenewCertificate(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := certificate_enrollment.NewRenewCertificateParams()
	if err, _ := retrieveOperationCertificateEnrollmentRenewCertificateEnrollCertificateRequestFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationCertificateEnrollmentRenewCertificateSerialNumberFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationCertificateEnrollmentRenewCertificateResult(appCli.CertificateEnrollment.RenewCertificate(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationCertificateEnrollmentRenewCertificateParamFlags registers all flags needed to fill params
func registerOperationCertificateEnrollmentRenewCertificateParamFlags(cmd *cobra.Command) error {
	if err := registerOperationCertificateEnrollmentRenewCertificateEnrollCertificateRequestParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationCertificateEnrollmentRenewCertificateSerialNumberParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationCertificateEnrollmentRenewCertificateEnrollCertificateRequestParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var enrollCertificateRequestFlagName string
	if cmdPrefix == "" {
		enrollCertificateRequestFlagName = "enrollCertificateRequest"
	} else {
		enrollCertificateRequestFlagName = fmt.Sprintf("%v.enrollCertificateRequest", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(enrollCertificateRequestFlagName, "", "Optional json string for [enrollCertificateRequest]. enrollCertificateRequest")

	// add flags for body
	if err := registerModelRequestCertificateRequestFlags(0, "requestCertificateRequest", cmd); err != nil {
		return err
	}

	return nil
}
func registerOperationCertificateEnrollmentRenewCertificateSerialNumberParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	serialNumberDescription := `Required. serialNumber`

	var serialNumberFlagName string
	if cmdPrefix == "" {
		serialNumberFlagName = "serialNumber"
	} else {
		serialNumberFlagName = fmt.Sprintf("%v.serialNumber", cmdPrefix)
	}

	var serialNumberFlagDefault string

	_ = cmd.PersistentFlags().String(serialNumberFlagName, serialNumberFlagDefault, serialNumberDescription)

	return nil
}

func retrieveOperationCertificateEnrollmentRenewCertificateEnrollCertificateRequestFlag(m *certificate_enrollment.RenewCertificateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("enrollCertificateRequest") {
		// Read enrollCertificateRequest string from cmd and unmarshal
		enrollCertificateRequestValueStr, err := cmd.Flags().GetString("enrollCertificateRequest")
		if err != nil {
			return err, false
		}

		enrollCertificateRequestValue := models.RequestCertificateRequest{}
		if err := json.Unmarshal([]byte(enrollCertificateRequestValueStr), &enrollCertificateRequestValue); err != nil {
			return fmt.Errorf("cannot unmarshal enrollCertificateRequest string in models.RequestCertificateRequest: %v", err), false
		}
		m.EnrollCertificateRequest = &enrollCertificateRequestValue
	}
	enrollCertificateRequestValueModel := m.EnrollCertificateRequest
	if swag.IsZero(enrollCertificateRequestValueModel) {
		enrollCertificateRequestValueModel = &models.RequestCertificateRequest{}
	}
	err, added := retrieveModelRequestCertificateRequestFlags(0, enrollCertificateRequestValueModel, "requestCertificateRequest", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.EnrollCertificateRequest = enrollCertificateRequestValueModel
	}
	if dryRun && debug {

		enrollCertificateRequestValueDebugBytes, err := json.Marshal(m.EnrollCertificateRequest)
		if err != nil {
			return err, false
		}
		logDebugf("EnrollCertificateRequest dry-run payload: %v", string(enrollCertificateRequestValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}
func retrieveOperationCertificateEnrollmentRenewCertificateSerialNumberFlag(m *certificate_enrollment.RenewCertificateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("serialNumber") {

		var serialNumberFlagName string
		if cmdPrefix == "" {
			serialNumberFlagName = "serialNumber"
		} else {
			serialNumberFlagName = fmt.Sprintf("%v.serialNumber", cmdPrefix)
		}

		serialNumberFlagValue, err := cmd.Flags().GetString(serialNumberFlagName)
		if err != nil {
			return err, false
		}
		m.SerialNumber = serialNumberFlagValue

	}
	return nil, retAdded
}

// parseOperationCertificateEnrollmentRenewCertificateResult parses request result and return the string content
func parseOperationCertificateEnrollmentRenewCertificateResult(resp0 *certificate_enrollment.RenewCertificateOK, resp1 *certificate_enrollment.RenewCertificateCreated, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*certificate_enrollment.RenewCertificateOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		// Non schema case: warning renewCertificateCreated is not supported

		// Non schema case: warning renewCertificateUnauthorized is not supported

		// Non schema case: warning renewCertificateForbidden is not supported

		// Non schema case: warning renewCertificateNotFound is not supported

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	// warning: non schema response renewCertificateCreated is not supported by go-swagger cli yet.

	return "", nil
}
