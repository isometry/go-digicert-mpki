// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/isometry/go-digicert-mpki/client/user_management"
	"github.com/isometry/go-digicert-mpki/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationUserManagementDeleteEnrollmentCmd returns a cmd to handle operation deleteEnrollment
func makeOperationUserManagementDeleteEnrollmentCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "deleteEnrollment",
		Short: ``,
		RunE:  runOperationUserManagementDeleteEnrollment,
	}

	if err := registerOperationUserManagementDeleteEnrollmentParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationUserManagementDeleteEnrollment uses cmd flags to call endpoint api
func runOperationUserManagementDeleteEnrollment(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := user_management.NewDeleteEnrollmentParams()
	if err, _ := retrieveOperationUserManagementDeleteEnrollmentDeleteEnrollRequestFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationUserManagementDeleteEnrollmentEnrollCodeFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationUserManagementDeleteEnrollmentResult(appCli.UserManagement.DeleteEnrollment(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationUserManagementDeleteEnrollmentParamFlags registers all flags needed to fill params
func registerOperationUserManagementDeleteEnrollmentParamFlags(cmd *cobra.Command) error {
	if err := registerOperationUserManagementDeleteEnrollmentDeleteEnrollRequestParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationUserManagementDeleteEnrollmentEnrollCodeParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationUserManagementDeleteEnrollmentDeleteEnrollRequestParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var deleteEnrollRequestFlagName string
	if cmdPrefix == "" {
		deleteEnrollRequestFlagName = "deleteEnrollRequest"
	} else {
		deleteEnrollRequestFlagName = fmt.Sprintf("%v.deleteEnrollRequest", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(deleteEnrollRequestFlagName, "", "Optional json string for [deleteEnrollRequest]. deleteEnrollRequest")

	// add flags for body
	if err := registerModelDeleteEnrollmentRequestFlags(0, "deleteEnrollmentRequest", cmd); err != nil {
		return err
	}

	return nil
}
func registerOperationUserManagementDeleteEnrollmentEnrollCodeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	enrollCodeDescription := `Required. enrollCode`

	var enrollCodeFlagName string
	if cmdPrefix == "" {
		enrollCodeFlagName = "enrollCode"
	} else {
		enrollCodeFlagName = fmt.Sprintf("%v.enrollCode", cmdPrefix)
	}

	var enrollCodeFlagDefault string

	_ = cmd.PersistentFlags().String(enrollCodeFlagName, enrollCodeFlagDefault, enrollCodeDescription)

	return nil
}

func retrieveOperationUserManagementDeleteEnrollmentDeleteEnrollRequestFlag(m *user_management.DeleteEnrollmentParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("deleteEnrollRequest") {
		// Read deleteEnrollRequest string from cmd and unmarshal
		deleteEnrollRequestValueStr, err := cmd.Flags().GetString("deleteEnrollRequest")
		if err != nil {
			return err, false
		}

		deleteEnrollRequestValue := models.DeleteEnrollmentRequest{}
		if err := json.Unmarshal([]byte(deleteEnrollRequestValueStr), &deleteEnrollRequestValue); err != nil {
			return fmt.Errorf("cannot unmarshal deleteEnrollRequest string in models.DeleteEnrollmentRequest: %v", err), false
		}
		m.DeleteEnrollRequest = &deleteEnrollRequestValue
	}
	deleteEnrollRequestValueModel := m.DeleteEnrollRequest
	if swag.IsZero(deleteEnrollRequestValueModel) {
		deleteEnrollRequestValueModel = &models.DeleteEnrollmentRequest{}
	}
	err, added := retrieveModelDeleteEnrollmentRequestFlags(0, deleteEnrollRequestValueModel, "deleteEnrollmentRequest", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.DeleteEnrollRequest = deleteEnrollRequestValueModel
	}
	if dryRun && debug {

		deleteEnrollRequestValueDebugBytes, err := json.Marshal(m.DeleteEnrollRequest)
		if err != nil {
			return err, false
		}
		logDebugf("DeleteEnrollRequest dry-run payload: %v", string(deleteEnrollRequestValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}
func retrieveOperationUserManagementDeleteEnrollmentEnrollCodeFlag(m *user_management.DeleteEnrollmentParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("enrollCode") {

		var enrollCodeFlagName string
		if cmdPrefix == "" {
			enrollCodeFlagName = "enrollCode"
		} else {
			enrollCodeFlagName = fmt.Sprintf("%v.enrollCode", cmdPrefix)
		}

		enrollCodeFlagValue, err := cmd.Flags().GetString(enrollCodeFlagName)
		if err != nil {
			return err, false
		}
		m.EnrollCode = enrollCodeFlagValue

	}
	return nil, retAdded
}

// parseOperationUserManagementDeleteEnrollmentResult parses request result and return the string content
func parseOperationUserManagementDeleteEnrollmentResult(resp0 *user_management.DeleteEnrollmentOK, resp1 *user_management.DeleteEnrollmentNoContent, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*user_management.DeleteEnrollmentOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		// Non schema case: warning deleteEnrollmentNoContent is not supported

		// Non schema case: warning deleteEnrollmentUnauthorized is not supported

		// Non schema case: warning deleteEnrollmentForbidden is not supported

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	// warning: non schema response deleteEnrollmentNoContent is not supported by go-swagger cli yet.

	return "", nil
}
