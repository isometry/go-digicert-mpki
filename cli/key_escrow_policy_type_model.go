// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/isometry/go-digicert-mpki/models"
	"github.com/spf13/cobra"
)

// Schema cli for KeyEscrowPolicyType

// register flags to command
func registerModelKeyEscrowPolicyTypeFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerKeyEscrowPolicyTypeDoKeyRecoveryForAdditionalEnrollRequest(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerKeyEscrowPolicyTypeKeyEscrowDeploymentMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerKeyEscrowPolicyTypeKeyEscrowEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerKeyEscrowPolicyTypeKeyRecoveryDualAdminApprovalRequired(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerKeyEscrowPolicyTypeDoKeyRecoveryForAdditionalEnrollRequest(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	doKeyRecoveryForAdditionalEnrollRequestDescription := ``

	var doKeyRecoveryForAdditionalEnrollRequestFlagName string
	if cmdPrefix == "" {
		doKeyRecoveryForAdditionalEnrollRequestFlagName = "do_key_recovery_for_additional_enroll_request"
	} else {
		doKeyRecoveryForAdditionalEnrollRequestFlagName = fmt.Sprintf("%v.do_key_recovery_for_additional_enroll_request", cmdPrefix)
	}

	var doKeyRecoveryForAdditionalEnrollRequestFlagDefault bool

	_ = cmd.PersistentFlags().Bool(doKeyRecoveryForAdditionalEnrollRequestFlagName, doKeyRecoveryForAdditionalEnrollRequestFlagDefault, doKeyRecoveryForAdditionalEnrollRequestDescription)

	return nil
}

func registerKeyEscrowPolicyTypeKeyEscrowDeploymentMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	keyEscrowDeploymentModeDescription := ``

	var keyEscrowDeploymentModeFlagName string
	if cmdPrefix == "" {
		keyEscrowDeploymentModeFlagName = "key_escrow_deployment_mode"
	} else {
		keyEscrowDeploymentModeFlagName = fmt.Sprintf("%v.key_escrow_deployment_mode", cmdPrefix)
	}

	var keyEscrowDeploymentModeFlagDefault string

	_ = cmd.PersistentFlags().String(keyEscrowDeploymentModeFlagName, keyEscrowDeploymentModeFlagDefault, keyEscrowDeploymentModeDescription)

	return nil
}

func registerKeyEscrowPolicyTypeKeyEscrowEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	keyEscrowEnabledDescription := ``

	var keyEscrowEnabledFlagName string
	if cmdPrefix == "" {
		keyEscrowEnabledFlagName = "key_escrow_enabled"
	} else {
		keyEscrowEnabledFlagName = fmt.Sprintf("%v.key_escrow_enabled", cmdPrefix)
	}

	var keyEscrowEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(keyEscrowEnabledFlagName, keyEscrowEnabledFlagDefault, keyEscrowEnabledDescription)

	return nil
}

func registerKeyEscrowPolicyTypeKeyRecoveryDualAdminApprovalRequired(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	keyRecoveryDualAdminApprovalRequiredDescription := ``

	var keyRecoveryDualAdminApprovalRequiredFlagName string
	if cmdPrefix == "" {
		keyRecoveryDualAdminApprovalRequiredFlagName = "key_recovery_dual_admin_approval_required"
	} else {
		keyRecoveryDualAdminApprovalRequiredFlagName = fmt.Sprintf("%v.key_recovery_dual_admin_approval_required", cmdPrefix)
	}

	var keyRecoveryDualAdminApprovalRequiredFlagDefault bool

	_ = cmd.PersistentFlags().Bool(keyRecoveryDualAdminApprovalRequiredFlagName, keyRecoveryDualAdminApprovalRequiredFlagDefault, keyRecoveryDualAdminApprovalRequiredDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelKeyEscrowPolicyTypeFlags(depth int, m *models.KeyEscrowPolicyType, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, doKeyRecoveryForAdditionalEnrollRequestAdded := retrieveKeyEscrowPolicyTypeDoKeyRecoveryForAdditionalEnrollRequestFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || doKeyRecoveryForAdditionalEnrollRequestAdded

	err, keyEscrowDeploymentModeAdded := retrieveKeyEscrowPolicyTypeKeyEscrowDeploymentModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || keyEscrowDeploymentModeAdded

	err, keyEscrowEnabledAdded := retrieveKeyEscrowPolicyTypeKeyEscrowEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || keyEscrowEnabledAdded

	err, keyRecoveryDualAdminApprovalRequiredAdded := retrieveKeyEscrowPolicyTypeKeyRecoveryDualAdminApprovalRequiredFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || keyRecoveryDualAdminApprovalRequiredAdded

	return nil, retAdded
}

func retrieveKeyEscrowPolicyTypeDoKeyRecoveryForAdditionalEnrollRequestFlags(depth int, m *models.KeyEscrowPolicyType, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	doKeyRecoveryForAdditionalEnrollRequestFlagName := fmt.Sprintf("%v.do_key_recovery_for_additional_enroll_request", cmdPrefix)
	if cmd.Flags().Changed(doKeyRecoveryForAdditionalEnrollRequestFlagName) {

		var doKeyRecoveryForAdditionalEnrollRequestFlagName string
		if cmdPrefix == "" {
			doKeyRecoveryForAdditionalEnrollRequestFlagName = "do_key_recovery_for_additional_enroll_request"
		} else {
			doKeyRecoveryForAdditionalEnrollRequestFlagName = fmt.Sprintf("%v.do_key_recovery_for_additional_enroll_request", cmdPrefix)
		}

		doKeyRecoveryForAdditionalEnrollRequestFlagValue, err := cmd.Flags().GetBool(doKeyRecoveryForAdditionalEnrollRequestFlagName)
		if err != nil {
			return err, false
		}
		m.DoKeyRecoveryForAdditionalEnrollRequest = doKeyRecoveryForAdditionalEnrollRequestFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveKeyEscrowPolicyTypeKeyEscrowDeploymentModeFlags(depth int, m *models.KeyEscrowPolicyType, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	keyEscrowDeploymentModeFlagName := fmt.Sprintf("%v.key_escrow_deployment_mode", cmdPrefix)
	if cmd.Flags().Changed(keyEscrowDeploymentModeFlagName) {

		var keyEscrowDeploymentModeFlagName string
		if cmdPrefix == "" {
			keyEscrowDeploymentModeFlagName = "key_escrow_deployment_mode"
		} else {
			keyEscrowDeploymentModeFlagName = fmt.Sprintf("%v.key_escrow_deployment_mode", cmdPrefix)
		}

		keyEscrowDeploymentModeFlagValue, err := cmd.Flags().GetString(keyEscrowDeploymentModeFlagName)
		if err != nil {
			return err, false
		}
		m.KeyEscrowDeploymentMode = keyEscrowDeploymentModeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveKeyEscrowPolicyTypeKeyEscrowEnabledFlags(depth int, m *models.KeyEscrowPolicyType, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	keyEscrowEnabledFlagName := fmt.Sprintf("%v.key_escrow_enabled", cmdPrefix)
	if cmd.Flags().Changed(keyEscrowEnabledFlagName) {

		var keyEscrowEnabledFlagName string
		if cmdPrefix == "" {
			keyEscrowEnabledFlagName = "key_escrow_enabled"
		} else {
			keyEscrowEnabledFlagName = fmt.Sprintf("%v.key_escrow_enabled", cmdPrefix)
		}

		keyEscrowEnabledFlagValue, err := cmd.Flags().GetBool(keyEscrowEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.KeyEscrowEnabled = keyEscrowEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveKeyEscrowPolicyTypeKeyRecoveryDualAdminApprovalRequiredFlags(depth int, m *models.KeyEscrowPolicyType, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	keyRecoveryDualAdminApprovalRequiredFlagName := fmt.Sprintf("%v.key_recovery_dual_admin_approval_required", cmdPrefix)
	if cmd.Flags().Changed(keyRecoveryDualAdminApprovalRequiredFlagName) {

		var keyRecoveryDualAdminApprovalRequiredFlagName string
		if cmdPrefix == "" {
			keyRecoveryDualAdminApprovalRequiredFlagName = "key_recovery_dual_admin_approval_required"
		} else {
			keyRecoveryDualAdminApprovalRequiredFlagName = fmt.Sprintf("%v.key_recovery_dual_admin_approval_required", cmdPrefix)
		}

		keyRecoveryDualAdminApprovalRequiredFlagValue, err := cmd.Flags().GetBool(keyRecoveryDualAdminApprovalRequiredFlagName)
		if err != nil {
			return err, false
		}
		m.KeyRecoveryDualAdminApprovalRequired = keyRecoveryDualAdminApprovalRequiredFlagValue

		retAdded = true
	}

	return nil, retAdded
}
