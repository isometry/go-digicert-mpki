// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/isometry/go-digicert-mpki/client/seat_management"
	"github.com/isometry/go-digicert-mpki/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationSeatManagementUpdateSeatCmd returns a cmd to handle operation updateSeat
func makeOperationSeatManagementUpdateSeatCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "updateSeat",
		Short: ``,
		RunE:  runOperationSeatManagementUpdateSeat,
	}

	if err := registerOperationSeatManagementUpdateSeatParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationSeatManagementUpdateSeat uses cmd flags to call endpoint api
func runOperationSeatManagementUpdateSeat(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := seat_management.NewUpdateSeatParams()
	if err, _ := retrieveOperationSeatManagementUpdateSeatSeatIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationSeatManagementUpdateSeatUpdateSeatRequestFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationSeatManagementUpdateSeatResult(appCli.SeatManagement.UpdateSeat(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationSeatManagementUpdateSeatParamFlags registers all flags needed to fill params
func registerOperationSeatManagementUpdateSeatParamFlags(cmd *cobra.Command) error {
	if err := registerOperationSeatManagementUpdateSeatSeatIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationSeatManagementUpdateSeatUpdateSeatRequestParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationSeatManagementUpdateSeatSeatIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	seatIdDescription := `Required. seatId`

	var seatIdFlagName string
	if cmdPrefix == "" {
		seatIdFlagName = "seatId"
	} else {
		seatIdFlagName = fmt.Sprintf("%v.seatId", cmdPrefix)
	}

	var seatIdFlagDefault string

	_ = cmd.PersistentFlags().String(seatIdFlagName, seatIdFlagDefault, seatIdDescription)

	return nil
}
func registerOperationSeatManagementUpdateSeatUpdateSeatRequestParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var updateSeatRequestFlagName string
	if cmdPrefix == "" {
		updateSeatRequestFlagName = "updateSeatRequest"
	} else {
		updateSeatRequestFlagName = fmt.Sprintf("%v.updateSeatRequest", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(updateSeatRequestFlagName, "", "Optional json string for [updateSeatRequest]. updateSeatRequest")

	// add flags for body
	if err := registerModelUpdateSeatRequestFlags(0, "updateSeatRequest", cmd); err != nil {
		return err
	}

	return nil
}

func retrieveOperationSeatManagementUpdateSeatSeatIDFlag(m *seat_management.UpdateSeatParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("seatId") {

		var seatIdFlagName string
		if cmdPrefix == "" {
			seatIdFlagName = "seatId"
		} else {
			seatIdFlagName = fmt.Sprintf("%v.seatId", cmdPrefix)
		}

		seatIdFlagValue, err := cmd.Flags().GetString(seatIdFlagName)
		if err != nil {
			return err, false
		}
		m.SeatID = seatIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationSeatManagementUpdateSeatUpdateSeatRequestFlag(m *seat_management.UpdateSeatParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("updateSeatRequest") {
		// Read updateSeatRequest string from cmd and unmarshal
		updateSeatRequestValueStr, err := cmd.Flags().GetString("updateSeatRequest")
		if err != nil {
			return err, false
		}

		updateSeatRequestValue := models.UpdateSeatRequest{}
		if err := json.Unmarshal([]byte(updateSeatRequestValueStr), &updateSeatRequestValue); err != nil {
			return fmt.Errorf("cannot unmarshal updateSeatRequest string in models.UpdateSeatRequest: %v", err), false
		}
		m.UpdateSeatRequest = &updateSeatRequestValue
	}
	updateSeatRequestValueModel := m.UpdateSeatRequest
	if swag.IsZero(updateSeatRequestValueModel) {
		updateSeatRequestValueModel = &models.UpdateSeatRequest{}
	}
	err, added := retrieveModelUpdateSeatRequestFlags(0, updateSeatRequestValueModel, "updateSeatRequest", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.UpdateSeatRequest = updateSeatRequestValueModel
	}
	if dryRun && debug {

		updateSeatRequestValueDebugBytes, err := json.Marshal(m.UpdateSeatRequest)
		if err != nil {
			return err, false
		}
		logDebugf("UpdateSeatRequest dry-run payload: %v", string(updateSeatRequestValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}

// parseOperationSeatManagementUpdateSeatResult parses request result and return the string content
func parseOperationSeatManagementUpdateSeatResult(resp0 *seat_management.UpdateSeatOK, resp1 *seat_management.UpdateSeatCreated, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*seat_management.UpdateSeatOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		// Non schema case: warning updateSeatCreated is not supported

		// Non schema case: warning updateSeatUnauthorized is not supported

		// Non schema case: warning updateSeatForbidden is not supported

		// Non schema case: warning updateSeatNotFound is not supported

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	// warning: non schema response updateSeatCreated is not supported by go-swagger cli yet.

	return "", nil
}
