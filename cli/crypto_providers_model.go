// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/isometry/go-digicert-mpki/models"
	"github.com/spf13/cobra"
)

// Schema cli for CryptoProviders

// register flags to command
func registerModelCryptoProvidersFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerCryptoProvidersProvider(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerCryptoProvidersProvider(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: provider []string array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelCryptoProvidersFlags(depth int, m *models.CryptoProviders, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, providerAdded := retrieveCryptoProvidersProviderFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || providerAdded

	return nil, retAdded
}

func retrieveCryptoProvidersProviderFlags(depth int, m *models.CryptoProviders, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	providerFlagName := fmt.Sprintf("%v.provider", cmdPrefix)
	if cmd.Flags().Changed(providerFlagName) {
		// warning: provider array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
