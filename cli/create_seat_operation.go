// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/isometry/go-digicert-mpki/client/seat_management"
	"github.com/isometry/go-digicert-mpki/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationSeatManagementCreateSeatCmd returns a cmd to handle operation createSeat
func makeOperationSeatManagementCreateSeatCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "createSeat",
		Short: ``,
		RunE:  runOperationSeatManagementCreateSeat,
	}

	if err := registerOperationSeatManagementCreateSeatParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationSeatManagementCreateSeat uses cmd flags to call endpoint api
func runOperationSeatManagementCreateSeat(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := seat_management.NewCreateSeatParams()
	if err, _ := retrieveOperationSeatManagementCreateSeatCreateSeatRequestFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationSeatManagementCreateSeatResult(appCli.SeatManagement.CreateSeat(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationSeatManagementCreateSeatParamFlags registers all flags needed to fill params
func registerOperationSeatManagementCreateSeatParamFlags(cmd *cobra.Command) error {
	if err := registerOperationSeatManagementCreateSeatCreateSeatRequestParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationSeatManagementCreateSeatCreateSeatRequestParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var createSeatRequestFlagName string
	if cmdPrefix == "" {
		createSeatRequestFlagName = "createSeatRequest"
	} else {
		createSeatRequestFlagName = fmt.Sprintf("%v.createSeatRequest", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(createSeatRequestFlagName, "", "Optional json string for [createSeatRequest]. createSeatRequest")

	// add flags for body
	if err := registerModelCreateSeatRequestFlags(0, "createSeatRequest", cmd); err != nil {
		return err
	}

	return nil
}

func retrieveOperationSeatManagementCreateSeatCreateSeatRequestFlag(m *seat_management.CreateSeatParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("createSeatRequest") {
		// Read createSeatRequest string from cmd and unmarshal
		createSeatRequestValueStr, err := cmd.Flags().GetString("createSeatRequest")
		if err != nil {
			return err, false
		}

		createSeatRequestValue := models.CreateSeatRequest{}
		if err := json.Unmarshal([]byte(createSeatRequestValueStr), &createSeatRequestValue); err != nil {
			return fmt.Errorf("cannot unmarshal createSeatRequest string in models.CreateSeatRequest: %v", err), false
		}
		m.CreateSeatRequest = &createSeatRequestValue
	}
	createSeatRequestValueModel := m.CreateSeatRequest
	if swag.IsZero(createSeatRequestValueModel) {
		createSeatRequestValueModel = &models.CreateSeatRequest{}
	}
	err, added := retrieveModelCreateSeatRequestFlags(0, createSeatRequestValueModel, "createSeatRequest", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.CreateSeatRequest = createSeatRequestValueModel
	}
	if dryRun && debug {

		createSeatRequestValueDebugBytes, err := json.Marshal(m.CreateSeatRequest)
		if err != nil {
			return err, false
		}
		logDebugf("CreateSeatRequest dry-run payload: %v", string(createSeatRequestValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}

// parseOperationSeatManagementCreateSeatResult parses request result and return the string content
func parseOperationSeatManagementCreateSeatResult(resp0 *seat_management.CreateSeatCreated, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*seat_management.CreateSeatCreated)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		// Non schema case: warning createSeatUnauthorized is not supported

		// Non schema case: warning createSeatForbidden is not supported

		// Non schema case: warning createSeatNotFound is not supported

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
