// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/isometry/go-digicert-mpki/models"

	"github.com/spf13/cobra"
)

// Schema cli for CertificateAttributes

// register flags to command
func registerModelCertificateAttributesFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerCertificateAttributesCommonName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateAttributesContentType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateAttributesCounterSignature(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateAttributesCountry(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateAttributesCustomAttributes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateAttributesDnQualifier(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateAttributesDomainComponent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateAttributesDomainName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateAttributesEmail(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateAttributesGivenName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateAttributesIPAddress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateAttributesJobTitle(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateAttributesLocality(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateAttributesMessageDigest(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateAttributesOrganizationName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateAttributesOrganizationUnit(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateAttributesPostalCode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateAttributesPseudonym(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateAttributesSan(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateAttributesSerialNumber(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateAttributesSigningTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateAttributesState(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateAttributesStreetAddress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateAttributesSurname(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateAttributesUniqueIdentifier(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateAttributesUnstructuredAddress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateAttributesUnstructuredName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateAttributesUserID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerCertificateAttributesCommonName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	commonNameDescription := ``

	var commonNameFlagName string
	if cmdPrefix == "" {
		commonNameFlagName = "common_name"
	} else {
		commonNameFlagName = fmt.Sprintf("%v.common_name", cmdPrefix)
	}

	var commonNameFlagDefault string

	_ = cmd.PersistentFlags().String(commonNameFlagName, commonNameFlagDefault, commonNameDescription)

	return nil
}

func registerCertificateAttributesContentType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	contentTypeDescription := ``

	var contentTypeFlagName string
	if cmdPrefix == "" {
		contentTypeFlagName = "content_type"
	} else {
		contentTypeFlagName = fmt.Sprintf("%v.content_type", cmdPrefix)
	}

	var contentTypeFlagDefault string

	_ = cmd.PersistentFlags().String(contentTypeFlagName, contentTypeFlagDefault, contentTypeDescription)

	return nil
}

func registerCertificateAttributesCounterSignature(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	counterSignatureDescription := ``

	var counterSignatureFlagName string
	if cmdPrefix == "" {
		counterSignatureFlagName = "counter_signature"
	} else {
		counterSignatureFlagName = fmt.Sprintf("%v.counter_signature", cmdPrefix)
	}

	var counterSignatureFlagDefault string

	_ = cmd.PersistentFlags().String(counterSignatureFlagName, counterSignatureFlagDefault, counterSignatureDescription)

	return nil
}

func registerCertificateAttributesCountry(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	countryDescription := ``

	var countryFlagName string
	if cmdPrefix == "" {
		countryFlagName = "country"
	} else {
		countryFlagName = fmt.Sprintf("%v.country", cmdPrefix)
	}

	var countryFlagDefault string

	_ = cmd.PersistentFlags().String(countryFlagName, countryFlagDefault, countryDescription)

	return nil
}

func registerCertificateAttributesCustomAttributes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: custom_attributes map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerCertificateAttributesDnQualifier(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dnQualifierDescription := ``

	var dnQualifierFlagName string
	if cmdPrefix == "" {
		dnQualifierFlagName = "dn_qualifier"
	} else {
		dnQualifierFlagName = fmt.Sprintf("%v.dn_qualifier", cmdPrefix)
	}

	var dnQualifierFlagDefault string

	_ = cmd.PersistentFlags().String(dnQualifierFlagName, dnQualifierFlagDefault, dnQualifierDescription)

	return nil
}

func registerCertificateAttributesDomainComponent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: domain_component []*Attribute array type is not supported by go-swagger cli yet

	return nil
}

func registerCertificateAttributesDomainName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	domainNameDescription := ``

	var domainNameFlagName string
	if cmdPrefix == "" {
		domainNameFlagName = "domain_name"
	} else {
		domainNameFlagName = fmt.Sprintf("%v.domain_name", cmdPrefix)
	}

	var domainNameFlagDefault string

	_ = cmd.PersistentFlags().String(domainNameFlagName, domainNameFlagDefault, domainNameDescription)

	return nil
}

func registerCertificateAttributesEmail(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	emailDescription := ``

	var emailFlagName string
	if cmdPrefix == "" {
		emailFlagName = "email"
	} else {
		emailFlagName = fmt.Sprintf("%v.email", cmdPrefix)
	}

	var emailFlagDefault string

	_ = cmd.PersistentFlags().String(emailFlagName, emailFlagDefault, emailDescription)

	return nil
}

func registerCertificateAttributesGivenName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	givenNameDescription := ``

	var givenNameFlagName string
	if cmdPrefix == "" {
		givenNameFlagName = "given_name"
	} else {
		givenNameFlagName = fmt.Sprintf("%v.given_name", cmdPrefix)
	}

	var givenNameFlagDefault string

	_ = cmd.PersistentFlags().String(givenNameFlagName, givenNameFlagDefault, givenNameDescription)

	return nil
}

func registerCertificateAttributesIPAddress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ipAddressDescription := ``

	var ipAddressFlagName string
	if cmdPrefix == "" {
		ipAddressFlagName = "ip_address"
	} else {
		ipAddressFlagName = fmt.Sprintf("%v.ip_address", cmdPrefix)
	}

	var ipAddressFlagDefault string

	_ = cmd.PersistentFlags().String(ipAddressFlagName, ipAddressFlagDefault, ipAddressDescription)

	return nil
}

func registerCertificateAttributesJobTitle(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	jobTitleDescription := ``

	var jobTitleFlagName string
	if cmdPrefix == "" {
		jobTitleFlagName = "job_title"
	} else {
		jobTitleFlagName = fmt.Sprintf("%v.job_title", cmdPrefix)
	}

	var jobTitleFlagDefault string

	_ = cmd.PersistentFlags().String(jobTitleFlagName, jobTitleFlagDefault, jobTitleDescription)

	return nil
}

func registerCertificateAttributesLocality(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	localityDescription := ``

	var localityFlagName string
	if cmdPrefix == "" {
		localityFlagName = "locality"
	} else {
		localityFlagName = fmt.Sprintf("%v.locality", cmdPrefix)
	}

	var localityFlagDefault string

	_ = cmd.PersistentFlags().String(localityFlagName, localityFlagDefault, localityDescription)

	return nil
}

func registerCertificateAttributesMessageDigest(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	messageDigestDescription := ``

	var messageDigestFlagName string
	if cmdPrefix == "" {
		messageDigestFlagName = "message_digest"
	} else {
		messageDigestFlagName = fmt.Sprintf("%v.message_digest", cmdPrefix)
	}

	var messageDigestFlagDefault string

	_ = cmd.PersistentFlags().String(messageDigestFlagName, messageDigestFlagDefault, messageDigestDescription)

	return nil
}

func registerCertificateAttributesOrganizationName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	organizationNameDescription := ``

	var organizationNameFlagName string
	if cmdPrefix == "" {
		organizationNameFlagName = "organization_name"
	} else {
		organizationNameFlagName = fmt.Sprintf("%v.organization_name", cmdPrefix)
	}

	var organizationNameFlagDefault string

	_ = cmd.PersistentFlags().String(organizationNameFlagName, organizationNameFlagDefault, organizationNameDescription)

	return nil
}

func registerCertificateAttributesOrganizationUnit(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: organization_unit []*Attribute array type is not supported by go-swagger cli yet

	return nil
}

func registerCertificateAttributesPostalCode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	postalCodeDescription := ``

	var postalCodeFlagName string
	if cmdPrefix == "" {
		postalCodeFlagName = "postal_code"
	} else {
		postalCodeFlagName = fmt.Sprintf("%v.postal_code", cmdPrefix)
	}

	var postalCodeFlagDefault string

	_ = cmd.PersistentFlags().String(postalCodeFlagName, postalCodeFlagDefault, postalCodeDescription)

	return nil
}

func registerCertificateAttributesPseudonym(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pseudonymDescription := ``

	var pseudonymFlagName string
	if cmdPrefix == "" {
		pseudonymFlagName = "pseudonym"
	} else {
		pseudonymFlagName = fmt.Sprintf("%v.pseudonym", cmdPrefix)
	}

	var pseudonymFlagDefault string

	_ = cmd.PersistentFlags().String(pseudonymFlagName, pseudonymFlagDefault, pseudonymDescription)

	return nil
}

func registerCertificateAttributesSan(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var sanFlagName string
	if cmdPrefix == "" {
		sanFlagName = "san"
	} else {
		sanFlagName = fmt.Sprintf("%v.san", cmdPrefix)
	}

	if err := registerModelSanAttributesFlags(depth+1, sanFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerCertificateAttributesSerialNumber(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	serialNumberDescription := ``

	var serialNumberFlagName string
	if cmdPrefix == "" {
		serialNumberFlagName = "serial_number"
	} else {
		serialNumberFlagName = fmt.Sprintf("%v.serial_number", cmdPrefix)
	}

	var serialNumberFlagDefault string

	_ = cmd.PersistentFlags().String(serialNumberFlagName, serialNumberFlagDefault, serialNumberDescription)

	return nil
}

func registerCertificateAttributesSigningTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	signingTimeDescription := ``

	var signingTimeFlagName string
	if cmdPrefix == "" {
		signingTimeFlagName = "signing_time"
	} else {
		signingTimeFlagName = fmt.Sprintf("%v.signing_time", cmdPrefix)
	}

	var signingTimeFlagDefault string

	_ = cmd.PersistentFlags().String(signingTimeFlagName, signingTimeFlagDefault, signingTimeDescription)

	return nil
}

func registerCertificateAttributesState(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	stateDescription := ``

	var stateFlagName string
	if cmdPrefix == "" {
		stateFlagName = "state"
	} else {
		stateFlagName = fmt.Sprintf("%v.state", cmdPrefix)
	}

	var stateFlagDefault string

	_ = cmd.PersistentFlags().String(stateFlagName, stateFlagDefault, stateDescription)

	return nil
}

func registerCertificateAttributesStreetAddress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: street_address []*Attribute array type is not supported by go-swagger cli yet

	return nil
}

func registerCertificateAttributesSurname(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	surnameDescription := ``

	var surnameFlagName string
	if cmdPrefix == "" {
		surnameFlagName = "surname"
	} else {
		surnameFlagName = fmt.Sprintf("%v.surname", cmdPrefix)
	}

	var surnameFlagDefault string

	_ = cmd.PersistentFlags().String(surnameFlagName, surnameFlagDefault, surnameDescription)

	return nil
}

func registerCertificateAttributesUniqueIdentifier(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	uniqueIdentifierDescription := ``

	var uniqueIdentifierFlagName string
	if cmdPrefix == "" {
		uniqueIdentifierFlagName = "unique_identifier"
	} else {
		uniqueIdentifierFlagName = fmt.Sprintf("%v.unique_identifier", cmdPrefix)
	}

	var uniqueIdentifierFlagDefault string

	_ = cmd.PersistentFlags().String(uniqueIdentifierFlagName, uniqueIdentifierFlagDefault, uniqueIdentifierDescription)

	return nil
}

func registerCertificateAttributesUnstructuredAddress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	unstructuredAddressDescription := ``

	var unstructuredAddressFlagName string
	if cmdPrefix == "" {
		unstructuredAddressFlagName = "unstructured_address"
	} else {
		unstructuredAddressFlagName = fmt.Sprintf("%v.unstructured_address", cmdPrefix)
	}

	var unstructuredAddressFlagDefault string

	_ = cmd.PersistentFlags().String(unstructuredAddressFlagName, unstructuredAddressFlagDefault, unstructuredAddressDescription)

	return nil
}

func registerCertificateAttributesUnstructuredName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	unstructuredNameDescription := ``

	var unstructuredNameFlagName string
	if cmdPrefix == "" {
		unstructuredNameFlagName = "unstructured_name"
	} else {
		unstructuredNameFlagName = fmt.Sprintf("%v.unstructured_name", cmdPrefix)
	}

	var unstructuredNameFlagDefault string

	_ = cmd.PersistentFlags().String(unstructuredNameFlagName, unstructuredNameFlagDefault, unstructuredNameDescription)

	return nil
}

func registerCertificateAttributesUserID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	userIdDescription := ``

	var userIdFlagName string
	if cmdPrefix == "" {
		userIdFlagName = "user_id"
	} else {
		userIdFlagName = fmt.Sprintf("%v.user_id", cmdPrefix)
	}

	var userIdFlagDefault string

	_ = cmd.PersistentFlags().String(userIdFlagName, userIdFlagDefault, userIdDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelCertificateAttributesFlags(depth int, m *models.CertificateAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, commonNameAdded := retrieveCertificateAttributesCommonNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || commonNameAdded

	err, contentTypeAdded := retrieveCertificateAttributesContentTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || contentTypeAdded

	err, counterSignatureAdded := retrieveCertificateAttributesCounterSignatureFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || counterSignatureAdded

	err, countryAdded := retrieveCertificateAttributesCountryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || countryAdded

	err, customAttributesAdded := retrieveCertificateAttributesCustomAttributesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || customAttributesAdded

	err, dnQualifierAdded := retrieveCertificateAttributesDnQualifierFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dnQualifierAdded

	err, domainComponentAdded := retrieveCertificateAttributesDomainComponentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || domainComponentAdded

	err, domainNameAdded := retrieveCertificateAttributesDomainNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || domainNameAdded

	err, emailAdded := retrieveCertificateAttributesEmailFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || emailAdded

	err, givenNameAdded := retrieveCertificateAttributesGivenNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || givenNameAdded

	err, ipAddressAdded := retrieveCertificateAttributesIPAddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ipAddressAdded

	err, jobTitleAdded := retrieveCertificateAttributesJobTitleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || jobTitleAdded

	err, localityAdded := retrieveCertificateAttributesLocalityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || localityAdded

	err, messageDigestAdded := retrieveCertificateAttributesMessageDigestFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || messageDigestAdded

	err, organizationNameAdded := retrieveCertificateAttributesOrganizationNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || organizationNameAdded

	err, organizationUnitAdded := retrieveCertificateAttributesOrganizationUnitFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || organizationUnitAdded

	err, postalCodeAdded := retrieveCertificateAttributesPostalCodeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || postalCodeAdded

	err, pseudonymAdded := retrieveCertificateAttributesPseudonymFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pseudonymAdded

	err, sanAdded := retrieveCertificateAttributesSanFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sanAdded

	err, serialNumberAdded := retrieveCertificateAttributesSerialNumberFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serialNumberAdded

	err, signingTimeAdded := retrieveCertificateAttributesSigningTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || signingTimeAdded

	err, stateAdded := retrieveCertificateAttributesStateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stateAdded

	err, streetAddressAdded := retrieveCertificateAttributesStreetAddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || streetAddressAdded

	err, surnameAdded := retrieveCertificateAttributesSurnameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || surnameAdded

	err, uniqueIdentifierAdded := retrieveCertificateAttributesUniqueIdentifierFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || uniqueIdentifierAdded

	err, unstructuredAddressAdded := retrieveCertificateAttributesUnstructuredAddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || unstructuredAddressAdded

	err, unstructuredNameAdded := retrieveCertificateAttributesUnstructuredNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || unstructuredNameAdded

	err, userIdAdded := retrieveCertificateAttributesUserIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || userIdAdded

	return nil, retAdded
}

func retrieveCertificateAttributesCommonNameFlags(depth int, m *models.CertificateAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	commonNameFlagName := fmt.Sprintf("%v.common_name", cmdPrefix)
	if cmd.Flags().Changed(commonNameFlagName) {

		var commonNameFlagName string
		if cmdPrefix == "" {
			commonNameFlagName = "common_name"
		} else {
			commonNameFlagName = fmt.Sprintf("%v.common_name", cmdPrefix)
		}

		commonNameFlagValue, err := cmd.Flags().GetString(commonNameFlagName)
		if err != nil {
			return err, false
		}
		m.CommonName = commonNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCertificateAttributesContentTypeFlags(depth int, m *models.CertificateAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	contentTypeFlagName := fmt.Sprintf("%v.content_type", cmdPrefix)
	if cmd.Flags().Changed(contentTypeFlagName) {

		var contentTypeFlagName string
		if cmdPrefix == "" {
			contentTypeFlagName = "content_type"
		} else {
			contentTypeFlagName = fmt.Sprintf("%v.content_type", cmdPrefix)
		}

		contentTypeFlagValue, err := cmd.Flags().GetString(contentTypeFlagName)
		if err != nil {
			return err, false
		}
		m.ContentType = contentTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCertificateAttributesCounterSignatureFlags(depth int, m *models.CertificateAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	counterSignatureFlagName := fmt.Sprintf("%v.counter_signature", cmdPrefix)
	if cmd.Flags().Changed(counterSignatureFlagName) {

		var counterSignatureFlagName string
		if cmdPrefix == "" {
			counterSignatureFlagName = "counter_signature"
		} else {
			counterSignatureFlagName = fmt.Sprintf("%v.counter_signature", cmdPrefix)
		}

		counterSignatureFlagValue, err := cmd.Flags().GetString(counterSignatureFlagName)
		if err != nil {
			return err, false
		}
		m.CounterSignature = counterSignatureFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCertificateAttributesCountryFlags(depth int, m *models.CertificateAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	countryFlagName := fmt.Sprintf("%v.country", cmdPrefix)
	if cmd.Flags().Changed(countryFlagName) {

		var countryFlagName string
		if cmdPrefix == "" {
			countryFlagName = "country"
		} else {
			countryFlagName = fmt.Sprintf("%v.country", cmdPrefix)
		}

		countryFlagValue, err := cmd.Flags().GetString(countryFlagName)
		if err != nil {
			return err, false
		}
		m.Country = countryFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCertificateAttributesCustomAttributesFlags(depth int, m *models.CertificateAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	customAttributesFlagName := fmt.Sprintf("%v.custom_attributes", cmdPrefix)
	if cmd.Flags().Changed(customAttributesFlagName) {
		// warning: custom_attributes map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveCertificateAttributesDnQualifierFlags(depth int, m *models.CertificateAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dnQualifierFlagName := fmt.Sprintf("%v.dn_qualifier", cmdPrefix)
	if cmd.Flags().Changed(dnQualifierFlagName) {

		var dnQualifierFlagName string
		if cmdPrefix == "" {
			dnQualifierFlagName = "dn_qualifier"
		} else {
			dnQualifierFlagName = fmt.Sprintf("%v.dn_qualifier", cmdPrefix)
		}

		dnQualifierFlagValue, err := cmd.Flags().GetString(dnQualifierFlagName)
		if err != nil {
			return err, false
		}
		m.DnQualifier = dnQualifierFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCertificateAttributesDomainComponentFlags(depth int, m *models.CertificateAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	domainComponentFlagName := fmt.Sprintf("%v.domain_component", cmdPrefix)
	if cmd.Flags().Changed(domainComponentFlagName) {
		// warning: domain_component array type []*Attribute is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveCertificateAttributesDomainNameFlags(depth int, m *models.CertificateAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	domainNameFlagName := fmt.Sprintf("%v.domain_name", cmdPrefix)
	if cmd.Flags().Changed(domainNameFlagName) {

		var domainNameFlagName string
		if cmdPrefix == "" {
			domainNameFlagName = "domain_name"
		} else {
			domainNameFlagName = fmt.Sprintf("%v.domain_name", cmdPrefix)
		}

		domainNameFlagValue, err := cmd.Flags().GetString(domainNameFlagName)
		if err != nil {
			return err, false
		}
		m.DomainName = domainNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCertificateAttributesEmailFlags(depth int, m *models.CertificateAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	emailFlagName := fmt.Sprintf("%v.email", cmdPrefix)
	if cmd.Flags().Changed(emailFlagName) {

		var emailFlagName string
		if cmdPrefix == "" {
			emailFlagName = "email"
		} else {
			emailFlagName = fmt.Sprintf("%v.email", cmdPrefix)
		}

		emailFlagValue, err := cmd.Flags().GetString(emailFlagName)
		if err != nil {
			return err, false
		}
		m.Email = emailFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCertificateAttributesGivenNameFlags(depth int, m *models.CertificateAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	givenNameFlagName := fmt.Sprintf("%v.given_name", cmdPrefix)
	if cmd.Flags().Changed(givenNameFlagName) {

		var givenNameFlagName string
		if cmdPrefix == "" {
			givenNameFlagName = "given_name"
		} else {
			givenNameFlagName = fmt.Sprintf("%v.given_name", cmdPrefix)
		}

		givenNameFlagValue, err := cmd.Flags().GetString(givenNameFlagName)
		if err != nil {
			return err, false
		}
		m.GivenName = givenNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCertificateAttributesIPAddressFlags(depth int, m *models.CertificateAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ipAddressFlagName := fmt.Sprintf("%v.ip_address", cmdPrefix)
	if cmd.Flags().Changed(ipAddressFlagName) {

		var ipAddressFlagName string
		if cmdPrefix == "" {
			ipAddressFlagName = "ip_address"
		} else {
			ipAddressFlagName = fmt.Sprintf("%v.ip_address", cmdPrefix)
		}

		ipAddressFlagValue, err := cmd.Flags().GetString(ipAddressFlagName)
		if err != nil {
			return err, false
		}
		m.IPAddress = ipAddressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCertificateAttributesJobTitleFlags(depth int, m *models.CertificateAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	jobTitleFlagName := fmt.Sprintf("%v.job_title", cmdPrefix)
	if cmd.Flags().Changed(jobTitleFlagName) {

		var jobTitleFlagName string
		if cmdPrefix == "" {
			jobTitleFlagName = "job_title"
		} else {
			jobTitleFlagName = fmt.Sprintf("%v.job_title", cmdPrefix)
		}

		jobTitleFlagValue, err := cmd.Flags().GetString(jobTitleFlagName)
		if err != nil {
			return err, false
		}
		m.JobTitle = jobTitleFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCertificateAttributesLocalityFlags(depth int, m *models.CertificateAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	localityFlagName := fmt.Sprintf("%v.locality", cmdPrefix)
	if cmd.Flags().Changed(localityFlagName) {

		var localityFlagName string
		if cmdPrefix == "" {
			localityFlagName = "locality"
		} else {
			localityFlagName = fmt.Sprintf("%v.locality", cmdPrefix)
		}

		localityFlagValue, err := cmd.Flags().GetString(localityFlagName)
		if err != nil {
			return err, false
		}
		m.Locality = localityFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCertificateAttributesMessageDigestFlags(depth int, m *models.CertificateAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	messageDigestFlagName := fmt.Sprintf("%v.message_digest", cmdPrefix)
	if cmd.Flags().Changed(messageDigestFlagName) {

		var messageDigestFlagName string
		if cmdPrefix == "" {
			messageDigestFlagName = "message_digest"
		} else {
			messageDigestFlagName = fmt.Sprintf("%v.message_digest", cmdPrefix)
		}

		messageDigestFlagValue, err := cmd.Flags().GetString(messageDigestFlagName)
		if err != nil {
			return err, false
		}
		m.MessageDigest = messageDigestFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCertificateAttributesOrganizationNameFlags(depth int, m *models.CertificateAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	organizationNameFlagName := fmt.Sprintf("%v.organization_name", cmdPrefix)
	if cmd.Flags().Changed(organizationNameFlagName) {

		var organizationNameFlagName string
		if cmdPrefix == "" {
			organizationNameFlagName = "organization_name"
		} else {
			organizationNameFlagName = fmt.Sprintf("%v.organization_name", cmdPrefix)
		}

		organizationNameFlagValue, err := cmd.Flags().GetString(organizationNameFlagName)
		if err != nil {
			return err, false
		}
		m.OrganizationName = organizationNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCertificateAttributesOrganizationUnitFlags(depth int, m *models.CertificateAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	organizationUnitFlagName := fmt.Sprintf("%v.organization_unit", cmdPrefix)
	if cmd.Flags().Changed(organizationUnitFlagName) {
		// warning: organization_unit array type []*Attribute is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveCertificateAttributesPostalCodeFlags(depth int, m *models.CertificateAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	postalCodeFlagName := fmt.Sprintf("%v.postal_code", cmdPrefix)
	if cmd.Flags().Changed(postalCodeFlagName) {

		var postalCodeFlagName string
		if cmdPrefix == "" {
			postalCodeFlagName = "postal_code"
		} else {
			postalCodeFlagName = fmt.Sprintf("%v.postal_code", cmdPrefix)
		}

		postalCodeFlagValue, err := cmd.Flags().GetString(postalCodeFlagName)
		if err != nil {
			return err, false
		}
		m.PostalCode = postalCodeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCertificateAttributesPseudonymFlags(depth int, m *models.CertificateAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pseudonymFlagName := fmt.Sprintf("%v.pseudonym", cmdPrefix)
	if cmd.Flags().Changed(pseudonymFlagName) {

		var pseudonymFlagName string
		if cmdPrefix == "" {
			pseudonymFlagName = "pseudonym"
		} else {
			pseudonymFlagName = fmt.Sprintf("%v.pseudonym", cmdPrefix)
		}

		pseudonymFlagValue, err := cmd.Flags().GetString(pseudonymFlagName)
		if err != nil {
			return err, false
		}
		m.Pseudonym = pseudonymFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCertificateAttributesSanFlags(depth int, m *models.CertificateAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sanFlagName := fmt.Sprintf("%v.san", cmdPrefix)
	if cmd.Flags().Changed(sanFlagName) {
		// info: complex object san SanAttributes is retrieved outside this Changed() block
	}
	sanFlagValue := m.San
	if swag.IsZero(sanFlagValue) {
		sanFlagValue = &models.SanAttributes{}
	}

	err, sanAdded := retrieveModelSanAttributesFlags(depth+1, sanFlagValue, sanFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sanAdded
	if sanAdded {
		m.San = sanFlagValue
	}

	return nil, retAdded
}

func retrieveCertificateAttributesSerialNumberFlags(depth int, m *models.CertificateAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	serialNumberFlagName := fmt.Sprintf("%v.serial_number", cmdPrefix)
	if cmd.Flags().Changed(serialNumberFlagName) {

		var serialNumberFlagName string
		if cmdPrefix == "" {
			serialNumberFlagName = "serial_number"
		} else {
			serialNumberFlagName = fmt.Sprintf("%v.serial_number", cmdPrefix)
		}

		serialNumberFlagValue, err := cmd.Flags().GetString(serialNumberFlagName)
		if err != nil {
			return err, false
		}
		m.SerialNumber = serialNumberFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCertificateAttributesSigningTimeFlags(depth int, m *models.CertificateAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	signingTimeFlagName := fmt.Sprintf("%v.signing_time", cmdPrefix)
	if cmd.Flags().Changed(signingTimeFlagName) {

		var signingTimeFlagName string
		if cmdPrefix == "" {
			signingTimeFlagName = "signing_time"
		} else {
			signingTimeFlagName = fmt.Sprintf("%v.signing_time", cmdPrefix)
		}

		signingTimeFlagValue, err := cmd.Flags().GetString(signingTimeFlagName)
		if err != nil {
			return err, false
		}
		m.SigningTime = signingTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCertificateAttributesStateFlags(depth int, m *models.CertificateAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stateFlagName := fmt.Sprintf("%v.state", cmdPrefix)
	if cmd.Flags().Changed(stateFlagName) {

		var stateFlagName string
		if cmdPrefix == "" {
			stateFlagName = "state"
		} else {
			stateFlagName = fmt.Sprintf("%v.state", cmdPrefix)
		}

		stateFlagValue, err := cmd.Flags().GetString(stateFlagName)
		if err != nil {
			return err, false
		}
		m.State = stateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCertificateAttributesStreetAddressFlags(depth int, m *models.CertificateAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	streetAddressFlagName := fmt.Sprintf("%v.street_address", cmdPrefix)
	if cmd.Flags().Changed(streetAddressFlagName) {
		// warning: street_address array type []*Attribute is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveCertificateAttributesSurnameFlags(depth int, m *models.CertificateAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	surnameFlagName := fmt.Sprintf("%v.surname", cmdPrefix)
	if cmd.Flags().Changed(surnameFlagName) {

		var surnameFlagName string
		if cmdPrefix == "" {
			surnameFlagName = "surname"
		} else {
			surnameFlagName = fmt.Sprintf("%v.surname", cmdPrefix)
		}

		surnameFlagValue, err := cmd.Flags().GetString(surnameFlagName)
		if err != nil {
			return err, false
		}
		m.Surname = surnameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCertificateAttributesUniqueIdentifierFlags(depth int, m *models.CertificateAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	uniqueIdentifierFlagName := fmt.Sprintf("%v.unique_identifier", cmdPrefix)
	if cmd.Flags().Changed(uniqueIdentifierFlagName) {

		var uniqueIdentifierFlagName string
		if cmdPrefix == "" {
			uniqueIdentifierFlagName = "unique_identifier"
		} else {
			uniqueIdentifierFlagName = fmt.Sprintf("%v.unique_identifier", cmdPrefix)
		}

		uniqueIdentifierFlagValue, err := cmd.Flags().GetString(uniqueIdentifierFlagName)
		if err != nil {
			return err, false
		}
		m.UniqueIdentifier = uniqueIdentifierFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCertificateAttributesUnstructuredAddressFlags(depth int, m *models.CertificateAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	unstructuredAddressFlagName := fmt.Sprintf("%v.unstructured_address", cmdPrefix)
	if cmd.Flags().Changed(unstructuredAddressFlagName) {

		var unstructuredAddressFlagName string
		if cmdPrefix == "" {
			unstructuredAddressFlagName = "unstructured_address"
		} else {
			unstructuredAddressFlagName = fmt.Sprintf("%v.unstructured_address", cmdPrefix)
		}

		unstructuredAddressFlagValue, err := cmd.Flags().GetString(unstructuredAddressFlagName)
		if err != nil {
			return err, false
		}
		m.UnstructuredAddress = unstructuredAddressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCertificateAttributesUnstructuredNameFlags(depth int, m *models.CertificateAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	unstructuredNameFlagName := fmt.Sprintf("%v.unstructured_name", cmdPrefix)
	if cmd.Flags().Changed(unstructuredNameFlagName) {

		var unstructuredNameFlagName string
		if cmdPrefix == "" {
			unstructuredNameFlagName = "unstructured_name"
		} else {
			unstructuredNameFlagName = fmt.Sprintf("%v.unstructured_name", cmdPrefix)
		}

		unstructuredNameFlagValue, err := cmd.Flags().GetString(unstructuredNameFlagName)
		if err != nil {
			return err, false
		}
		m.UnstructuredName = unstructuredNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCertificateAttributesUserIDFlags(depth int, m *models.CertificateAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	userIdFlagName := fmt.Sprintf("%v.user_id", cmdPrefix)
	if cmd.Flags().Changed(userIdFlagName) {

		var userIdFlagName string
		if cmdPrefix == "" {
			userIdFlagName = "user_id"
		} else {
			userIdFlagName = fmt.Sprintf("%v.user_id", cmdPrefix)
		}

		userIdFlagValue, err := cmd.Flags().GetString(userIdFlagName)
		if err != nil {
			return err, false
		}
		m.UserID = userIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}
