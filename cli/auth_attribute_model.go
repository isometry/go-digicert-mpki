// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/isometry/go-digicert-mpki/models"
	"github.com/spf13/cobra"
)

// Schema cli for AuthAttribute

// register flags to command
func registerModelAuthAttributeFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerAuthAttributeDisplayName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAuthAttributeID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAuthAttributeMandatory(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAuthAttributeType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAuthAttributeValue(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerAuthAttributeDisplayName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	displayNameDescription := ``

	var displayNameFlagName string
	if cmdPrefix == "" {
		displayNameFlagName = "display_name"
	} else {
		displayNameFlagName = fmt.Sprintf("%v.display_name", cmdPrefix)
	}

	var displayNameFlagDefault string

	_ = cmd.PersistentFlags().String(displayNameFlagName, displayNameFlagDefault, displayNameDescription)

	return nil
}

func registerAuthAttributeID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := ``

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerAuthAttributeMandatory(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	mandatoryDescription := ``

	var mandatoryFlagName string
	if cmdPrefix == "" {
		mandatoryFlagName = "mandatory"
	} else {
		mandatoryFlagName = fmt.Sprintf("%v.mandatory", cmdPrefix)
	}

	var mandatoryFlagDefault bool

	_ = cmd.PersistentFlags().Bool(mandatoryFlagName, mandatoryFlagDefault, mandatoryDescription)

	return nil
}

func registerAuthAttributeType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := ``

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	return nil
}

func registerAuthAttributeValue(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	valueDescription := ``

	var valueFlagName string
	if cmdPrefix == "" {
		valueFlagName = "value"
	} else {
		valueFlagName = fmt.Sprintf("%v.value", cmdPrefix)
	}

	var valueFlagDefault string

	_ = cmd.PersistentFlags().String(valueFlagName, valueFlagDefault, valueDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelAuthAttributeFlags(depth int, m *models.AuthAttribute, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, displayNameAdded := retrieveAuthAttributeDisplayNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || displayNameAdded

	err, idAdded := retrieveAuthAttributeIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, mandatoryAdded := retrieveAuthAttributeMandatoryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || mandatoryAdded

	err, typeAdded := retrieveAuthAttributeTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	err, valueAdded := retrieveAuthAttributeValueFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || valueAdded

	return nil, retAdded
}

func retrieveAuthAttributeDisplayNameFlags(depth int, m *models.AuthAttribute, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	displayNameFlagName := fmt.Sprintf("%v.display_name", cmdPrefix)
	if cmd.Flags().Changed(displayNameFlagName) {

		var displayNameFlagName string
		if cmdPrefix == "" {
			displayNameFlagName = "display_name"
		} else {
			displayNameFlagName = fmt.Sprintf("%v.display_name", cmdPrefix)
		}

		displayNameFlagValue, err := cmd.Flags().GetString(displayNameFlagName)
		if err != nil {
			return err, false
		}
		m.DisplayName = displayNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAuthAttributeIDFlags(depth int, m *models.AuthAttribute, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAuthAttributeMandatoryFlags(depth int, m *models.AuthAttribute, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	mandatoryFlagName := fmt.Sprintf("%v.mandatory", cmdPrefix)
	if cmd.Flags().Changed(mandatoryFlagName) {

		var mandatoryFlagName string
		if cmdPrefix == "" {
			mandatoryFlagName = "mandatory"
		} else {
			mandatoryFlagName = fmt.Sprintf("%v.mandatory", cmdPrefix)
		}

		mandatoryFlagValue, err := cmd.Flags().GetBool(mandatoryFlagName)
		if err != nil {
			return err, false
		}
		m.Mandatory = mandatoryFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAuthAttributeTypeFlags(depth int, m *models.AuthAttribute, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAuthAttributeValueFlags(depth int, m *models.AuthAttribute, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	valueFlagName := fmt.Sprintf("%v.value", cmdPrefix)
	if cmd.Flags().Changed(valueFlagName) {

		var valueFlagName string
		if cmdPrefix == "" {
			valueFlagName = "value"
		} else {
			valueFlagName = fmt.Sprintf("%v.value", cmdPrefix)
		}

		valueFlagValue, err := cmd.Flags().GetString(valueFlagName)
		if err != nil {
			return err, false
		}
		m.Value = valueFlagValue

		retAdded = true
	}

	return nil, retAdded
}
