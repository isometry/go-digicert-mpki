// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/isometry/go-digicert-mpki/models"
	"github.com/spf13/cobra"
)

// Schema cli for GetEnrollStatusResponse

// register flags to command
func registerModelGetEnrollStatusResponseFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerGetEnrollStatusResponseCertificates(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGetEnrollStatusResponseCreatedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGetEnrollStatusResponseProfileID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGetEnrollStatusResponseStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGetEnrollStatusResponseUpdatedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerGetEnrollStatusResponseCertificates(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: certificates []string array type is not supported by go-swagger cli yet

	return nil
}

func registerGetEnrollStatusResponseCreatedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	createdAtDescription := ``

	var createdAtFlagName string
	if cmdPrefix == "" {
		createdAtFlagName = "created_at"
	} else {
		createdAtFlagName = fmt.Sprintf("%v.created_at", cmdPrefix)
	}

	var createdAtFlagDefault string

	_ = cmd.PersistentFlags().String(createdAtFlagName, createdAtFlagDefault, createdAtDescription)

	return nil
}

func registerGetEnrollStatusResponseProfileID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	profileIdDescription := ``

	var profileIdFlagName string
	if cmdPrefix == "" {
		profileIdFlagName = "profile_id"
	} else {
		profileIdFlagName = fmt.Sprintf("%v.profile_id", cmdPrefix)
	}

	var profileIdFlagDefault string

	_ = cmd.PersistentFlags().String(profileIdFlagName, profileIdFlagDefault, profileIdDescription)

	return nil
}

func registerGetEnrollStatusResponseStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statusDescription := ``

	var statusFlagName string
	if cmdPrefix == "" {
		statusFlagName = "status"
	} else {
		statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var statusFlagDefault string

	_ = cmd.PersistentFlags().String(statusFlagName, statusFlagDefault, statusDescription)

	return nil
}

func registerGetEnrollStatusResponseUpdatedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	updatedAtDescription := ``

	var updatedAtFlagName string
	if cmdPrefix == "" {
		updatedAtFlagName = "updated_at"
	} else {
		updatedAtFlagName = fmt.Sprintf("%v.updated_at", cmdPrefix)
	}

	var updatedAtFlagDefault string

	_ = cmd.PersistentFlags().String(updatedAtFlagName, updatedAtFlagDefault, updatedAtDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelGetEnrollStatusResponseFlags(depth int, m *models.GetEnrollStatusResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, certificatesAdded := retrieveGetEnrollStatusResponseCertificatesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || certificatesAdded

	err, createdAtAdded := retrieveGetEnrollStatusResponseCreatedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || createdAtAdded

	err, profileIdAdded := retrieveGetEnrollStatusResponseProfileIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || profileIdAdded

	err, statusAdded := retrieveGetEnrollStatusResponseStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusAdded

	err, updatedAtAdded := retrieveGetEnrollStatusResponseUpdatedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || updatedAtAdded

	return nil, retAdded
}

func retrieveGetEnrollStatusResponseCertificatesFlags(depth int, m *models.GetEnrollStatusResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	certificatesFlagName := fmt.Sprintf("%v.certificates", cmdPrefix)
	if cmd.Flags().Changed(certificatesFlagName) {
		// warning: certificates array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveGetEnrollStatusResponseCreatedAtFlags(depth int, m *models.GetEnrollStatusResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	createdAtFlagName := fmt.Sprintf("%v.created_at", cmdPrefix)
	if cmd.Flags().Changed(createdAtFlagName) {

		var createdAtFlagName string
		if cmdPrefix == "" {
			createdAtFlagName = "created_at"
		} else {
			createdAtFlagName = fmt.Sprintf("%v.created_at", cmdPrefix)
		}

		createdAtFlagValue, err := cmd.Flags().GetString(createdAtFlagName)
		if err != nil {
			return err, false
		}
		m.CreatedAt = createdAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGetEnrollStatusResponseProfileIDFlags(depth int, m *models.GetEnrollStatusResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	profileIdFlagName := fmt.Sprintf("%v.profile_id", cmdPrefix)
	if cmd.Flags().Changed(profileIdFlagName) {

		var profileIdFlagName string
		if cmdPrefix == "" {
			profileIdFlagName = "profile_id"
		} else {
			profileIdFlagName = fmt.Sprintf("%v.profile_id", cmdPrefix)
		}

		profileIdFlagValue, err := cmd.Flags().GetString(profileIdFlagName)
		if err != nil {
			return err, false
		}
		m.ProfileID = profileIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGetEnrollStatusResponseStatusFlags(depth int, m *models.GetEnrollStatusResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusFlagName := fmt.Sprintf("%v.status", cmdPrefix)
	if cmd.Flags().Changed(statusFlagName) {

		var statusFlagName string
		if cmdPrefix == "" {
			statusFlagName = "status"
		} else {
			statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		statusFlagValue, err := cmd.Flags().GetString(statusFlagName)
		if err != nil {
			return err, false
		}
		m.Status = statusFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGetEnrollStatusResponseUpdatedAtFlags(depth int, m *models.GetEnrollStatusResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	updatedAtFlagName := fmt.Sprintf("%v.updated_at", cmdPrefix)
	if cmd.Flags().Changed(updatedAtFlagName) {

		var updatedAtFlagName string
		if cmdPrefix == "" {
			updatedAtFlagName = "updated_at"
		} else {
			updatedAtFlagName = fmt.Sprintf("%v.updated_at", cmdPrefix)
		}

		updatedAtFlagValue, err := cmd.Flags().GetString(updatedAtFlagName)
		if err != nil {
			return err, false
		}
		m.UpdatedAt = updatedAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}
