// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/isometry/go-digicert-mpki/models"
	"github.com/spf13/cobra"
)

// Schema cli for Revocation

// register flags to command
func registerModelRevocationFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerRevocationComments(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRevocationReason(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRevocationRevocationDate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerRevocationComments(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	commentsDescription := ``

	var commentsFlagName string
	if cmdPrefix == "" {
		commentsFlagName = "comments"
	} else {
		commentsFlagName = fmt.Sprintf("%v.comments", cmdPrefix)
	}

	var commentsFlagDefault string

	_ = cmd.PersistentFlags().String(commentsFlagName, commentsFlagDefault, commentsDescription)

	return nil
}

func registerRevocationReason(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	reasonDescription := ``

	var reasonFlagName string
	if cmdPrefix == "" {
		reasonFlagName = "reason"
	} else {
		reasonFlagName = fmt.Sprintf("%v.reason", cmdPrefix)
	}

	var reasonFlagDefault string

	_ = cmd.PersistentFlags().String(reasonFlagName, reasonFlagDefault, reasonDescription)

	return nil
}

func registerRevocationRevocationDate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	revocationDateDescription := ``

	var revocationDateFlagName string
	if cmdPrefix == "" {
		revocationDateFlagName = "revocation_date"
	} else {
		revocationDateFlagName = fmt.Sprintf("%v.revocation_date", cmdPrefix)
	}

	var revocationDateFlagDefault string

	_ = cmd.PersistentFlags().String(revocationDateFlagName, revocationDateFlagDefault, revocationDateDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelRevocationFlags(depth int, m *models.Revocation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, commentsAdded := retrieveRevocationCommentsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || commentsAdded

	err, reasonAdded := retrieveRevocationReasonFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || reasonAdded

	err, revocationDateAdded := retrieveRevocationRevocationDateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || revocationDateAdded

	return nil, retAdded
}

func retrieveRevocationCommentsFlags(depth int, m *models.Revocation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	commentsFlagName := fmt.Sprintf("%v.comments", cmdPrefix)
	if cmd.Flags().Changed(commentsFlagName) {

		var commentsFlagName string
		if cmdPrefix == "" {
			commentsFlagName = "comments"
		} else {
			commentsFlagName = fmt.Sprintf("%v.comments", cmdPrefix)
		}

		commentsFlagValue, err := cmd.Flags().GetString(commentsFlagName)
		if err != nil {
			return err, false
		}
		m.Comments = commentsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRevocationReasonFlags(depth int, m *models.Revocation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	reasonFlagName := fmt.Sprintf("%v.reason", cmdPrefix)
	if cmd.Flags().Changed(reasonFlagName) {

		var reasonFlagName string
		if cmdPrefix == "" {
			reasonFlagName = "reason"
		} else {
			reasonFlagName = fmt.Sprintf("%v.reason", cmdPrefix)
		}

		reasonFlagValue, err := cmd.Flags().GetString(reasonFlagName)
		if err != nil {
			return err, false
		}
		m.Reason = reasonFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRevocationRevocationDateFlags(depth int, m *models.Revocation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	revocationDateFlagName := fmt.Sprintf("%v.revocation_date", cmdPrefix)
	if cmd.Flags().Changed(revocationDateFlagName) {

		var revocationDateFlagName string
		if cmdPrefix == "" {
			revocationDateFlagName = "revocation_date"
		} else {
			revocationDateFlagName = fmt.Sprintf("%v.revocation_date", cmdPrefix)
		}

		revocationDateFlagValue, err := cmd.Flags().GetString(revocationDateFlagName)
		if err != nil {
			return err, false
		}
		m.RevocationDate = revocationDateFlagValue

		retAdded = true
	}

	return nil, retAdded
}
