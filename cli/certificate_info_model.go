// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/isometry/go-digicert-mpki/models"
	"github.com/spf13/cobra"
)

// Schema cli for CertificateInfo

// register flags to command
func registerModelCertificateInfoFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerCertificateInfoCertificate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateInfoRoot(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateInfoSerialNumber(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateInfoSubjectDn(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerCertificateInfoCertificate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive certificate strfmt.Base64 is not supported by go-swagger cli yet

	return nil
}

func registerCertificateInfoRoot(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	rootDescription := ``

	var rootFlagName string
	if cmdPrefix == "" {
		rootFlagName = "root"
	} else {
		rootFlagName = fmt.Sprintf("%v.root", cmdPrefix)
	}

	var rootFlagDefault bool

	_ = cmd.PersistentFlags().Bool(rootFlagName, rootFlagDefault, rootDescription)

	return nil
}

func registerCertificateInfoSerialNumber(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	serialNumberDescription := ``

	var serialNumberFlagName string
	if cmdPrefix == "" {
		serialNumberFlagName = "serial_number"
	} else {
		serialNumberFlagName = fmt.Sprintf("%v.serial_number", cmdPrefix)
	}

	var serialNumberFlagDefault string

	_ = cmd.PersistentFlags().String(serialNumberFlagName, serialNumberFlagDefault, serialNumberDescription)

	return nil
}

func registerCertificateInfoSubjectDn(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	subjectDnDescription := ``

	var subjectDnFlagName string
	if cmdPrefix == "" {
		subjectDnFlagName = "subject_dn"
	} else {
		subjectDnFlagName = fmt.Sprintf("%v.subject_dn", cmdPrefix)
	}

	var subjectDnFlagDefault string

	_ = cmd.PersistentFlags().String(subjectDnFlagName, subjectDnFlagDefault, subjectDnDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelCertificateInfoFlags(depth int, m *models.CertificateInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, certificateAdded := retrieveCertificateInfoCertificateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || certificateAdded

	err, rootAdded := retrieveCertificateInfoRootFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || rootAdded

	err, serialNumberAdded := retrieveCertificateInfoSerialNumberFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serialNumberAdded

	err, subjectDnAdded := retrieveCertificateInfoSubjectDnFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || subjectDnAdded

	return nil, retAdded
}

func retrieveCertificateInfoCertificateFlags(depth int, m *models.CertificateInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	certificateFlagName := fmt.Sprintf("%v.certificate", cmdPrefix)
	if cmd.Flags().Changed(certificateFlagName) {

		// warning: primitive certificate strfmt.Base64 is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCertificateInfoRootFlags(depth int, m *models.CertificateInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	rootFlagName := fmt.Sprintf("%v.root", cmdPrefix)
	if cmd.Flags().Changed(rootFlagName) {

		var rootFlagName string
		if cmdPrefix == "" {
			rootFlagName = "root"
		} else {
			rootFlagName = fmt.Sprintf("%v.root", cmdPrefix)
		}

		rootFlagValue, err := cmd.Flags().GetBool(rootFlagName)
		if err != nil {
			return err, false
		}
		m.Root = rootFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCertificateInfoSerialNumberFlags(depth int, m *models.CertificateInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	serialNumberFlagName := fmt.Sprintf("%v.serial_number", cmdPrefix)
	if cmd.Flags().Changed(serialNumberFlagName) {

		var serialNumberFlagName string
		if cmdPrefix == "" {
			serialNumberFlagName = "serial_number"
		} else {
			serialNumberFlagName = fmt.Sprintf("%v.serial_number", cmdPrefix)
		}

		serialNumberFlagValue, err := cmd.Flags().GetString(serialNumberFlagName)
		if err != nil {
			return err, false
		}
		m.SerialNumber = serialNumberFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCertificateInfoSubjectDnFlags(depth int, m *models.CertificateInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	subjectDnFlagName := fmt.Sprintf("%v.subject_dn", cmdPrefix)
	if cmd.Flags().Changed(subjectDnFlagName) {

		var subjectDnFlagName string
		if cmdPrefix == "" {
			subjectDnFlagName = "subject_dn"
		} else {
			subjectDnFlagName = fmt.Sprintf("%v.subject_dn", cmdPrefix)
		}

		subjectDnFlagValue, err := cmd.Flags().GetString(subjectDnFlagName)
		if err != nil {
			return err, false
		}
		m.SubjectDn = subjectDnFlagValue

		retAdded = true
	}

	return nil, retAdded
}
