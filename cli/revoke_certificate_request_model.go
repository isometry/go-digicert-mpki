// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/isometry/go-digicert-mpki/models"
	"github.com/spf13/cobra"
)

// Schema cli for RevokeCertificateRequest

// register flags to command
func registerModelRevokeCertificateRequestFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerRevokeCertificateRequestRevocationReason(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerRevokeCertificateRequestRevocationReason(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	revocationReasonDescription := ``

	var revocationReasonFlagName string
	if cmdPrefix == "" {
		revocationReasonFlagName = "revocation_reason"
	} else {
		revocationReasonFlagName = fmt.Sprintf("%v.revocation_reason", cmdPrefix)
	}

	var revocationReasonFlagDefault string

	_ = cmd.PersistentFlags().String(revocationReasonFlagName, revocationReasonFlagDefault, revocationReasonDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelRevokeCertificateRequestFlags(depth int, m *models.RevokeCertificateRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, revocationReasonAdded := retrieveRevokeCertificateRequestRevocationReasonFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || revocationReasonAdded

	return nil, retAdded
}

func retrieveRevokeCertificateRequestRevocationReasonFlags(depth int, m *models.RevokeCertificateRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	revocationReasonFlagName := fmt.Sprintf("%v.revocation_reason", cmdPrefix)
	if cmd.Flags().Changed(revocationReasonFlagName) {

		var revocationReasonFlagName string
		if cmdPrefix == "" {
			revocationReasonFlagName = "revocation_reason"
		} else {
			revocationReasonFlagName = fmt.Sprintf("%v.revocation_reason", cmdPrefix)
		}

		revocationReasonFlagValue, err := cmd.Flags().GetString(revocationReasonFlagName)
		if err != nil {
			return err, false
		}
		m.RevocationReason = revocationReasonFlagValue

		retAdded = true
	}

	return nil, retAdded
}
