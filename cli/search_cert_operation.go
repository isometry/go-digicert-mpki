// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/isometry/go-digicert-mpki/client/search_certificate"
	"github.com/isometry/go-digicert-mpki/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationSearchCertificateSearchCertCmd returns a cmd to handle operation searchCert
func makeOperationSearchCertificateSearchCertCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "searchCert",
		Short: ``,
		RunE:  runOperationSearchCertificateSearchCert,
	}

	if err := registerOperationSearchCertificateSearchCertParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationSearchCertificateSearchCert uses cmd flags to call endpoint api
func runOperationSearchCertificateSearchCert(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := search_certificate.NewSearchCertParams()
	if err, _ := retrieveOperationSearchCertificateSearchCertSearchReqFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationSearchCertificateSearchCertResult(appCli.SearchCertificate.SearchCert(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationSearchCertificateSearchCertParamFlags registers all flags needed to fill params
func registerOperationSearchCertificateSearchCertParamFlags(cmd *cobra.Command) error {
	if err := registerOperationSearchCertificateSearchCertSearchReqParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationSearchCertificateSearchCertSearchReqParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var searchReqFlagName string
	if cmdPrefix == "" {
		searchReqFlagName = "searchReq"
	} else {
		searchReqFlagName = fmt.Sprintf("%v.searchReq", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(searchReqFlagName, "", "Optional json string for [searchReq]. searchReq")

	// add flags for body
	if err := RegisterModelSearchCertificateRequestFlags(0, "searchCertificateRequest", cmd); err != nil {
		return err
	}

	return nil
}

func retrieveOperationSearchCertificateSearchCertSearchReqFlag(m *search_certificate.SearchCertParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("searchReq") {
		// Read searchReq string from cmd and unmarshal
		searchReqValueStr, err := cmd.Flags().GetString("searchReq")
		if err != nil {
			return err, false
		}

		searchReqValue := models.SearchCertificateRequest{}
		if err := json.Unmarshal([]byte(searchReqValueStr), &searchReqValue); err != nil {
			return fmt.Errorf("cannot unmarshal searchReq string in models.SearchCertificateRequest: %v", err), false
		}
		m.SearchReq = &searchReqValue
	}
	searchReqValueModel := m.SearchReq
	if swag.IsZero(searchReqValueModel) {
		searchReqValueModel = &models.SearchCertificateRequest{}
	}
	err, added := RetrieveModelSearchCertificateRequestFlags(0, searchReqValueModel, "searchCertificateRequest", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.SearchReq = searchReqValueModel
	}
	if dryRun && debug {

		searchReqValueDebugBytes, err := json.Marshal(m.SearchReq)
		if err != nil {
			return err, false
		}
		logDebugf("SearchReq dry-run payload: %v", string(searchReqValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}

// parseOperationSearchCertificateSearchCertResult parses request result and return the string content
func parseOperationSearchCertificateSearchCertResult(resp0 *search_certificate.SearchCertOK, resp1 *search_certificate.SearchCertCreated, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*search_certificate.SearchCertOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		// Non schema case: warning searchCertCreated is not supported

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*search_certificate.SearchCertBadRequest)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		// Non schema case: warning searchCertUnauthorized is not supported

		// Non schema case: warning searchCertForbidden is not supported

		var iResp5 interface{} = respErr
		resp5, ok := iResp5.(*search_certificate.SearchCertNotFound)
		if ok {
			if !swag.IsZero(resp5) && !swag.IsZero(resp5.Payload) {
				msgStr, err := json.Marshal(resp5.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp6 interface{} = respErr
		resp6, ok := iResp6.(*search_certificate.SearchCertInternalServerError)
		if ok {
			if !swag.IsZero(resp6) && !swag.IsZero(resp6.Payload) {
				msgStr, err := json.Marshal(resp6.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	// warning: non schema response searchCertCreated is not supported by go-swagger cli yet.

	return "", nil
}
