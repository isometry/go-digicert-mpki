// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/isometry/go-digicert-mpki/models"

	"github.com/spf13/cobra"
)

// Schema cli for PrivateKeyAttributes

// register flags to command
func registerModelPrivateKeyAttributesFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPrivateKeyAttributesAlgorithmOid(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPrivateKeyAttributesCryptoProviders(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPrivateKeyAttributesKeyEscrowPolicy(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPrivateKeyAttributesKeyExportable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPrivateKeyAttributesKeyProtect(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPrivateKeyAttributesKeySize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPrivateKeyAttributesKeySizes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPrivateKeyAttributesAlgorithmOid(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	algorithmOidDescription := ``

	var algorithmOidFlagName string
	if cmdPrefix == "" {
		algorithmOidFlagName = "algorithm_oid"
	} else {
		algorithmOidFlagName = fmt.Sprintf("%v.algorithm_oid", cmdPrefix)
	}

	var algorithmOidFlagDefault string

	_ = cmd.PersistentFlags().String(algorithmOidFlagName, algorithmOidFlagDefault, algorithmOidDescription)

	return nil
}

func registerPrivateKeyAttributesCryptoProviders(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var cryptoProvidersFlagName string
	if cmdPrefix == "" {
		cryptoProvidersFlagName = "crypto_providers"
	} else {
		cryptoProvidersFlagName = fmt.Sprintf("%v.crypto_providers", cmdPrefix)
	}

	if err := registerModelCryptoProvidersFlags(depth+1, cryptoProvidersFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPrivateKeyAttributesKeyEscrowPolicy(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var keyEscrowPolicyFlagName string
	if cmdPrefix == "" {
		keyEscrowPolicyFlagName = "key_escrow_policy"
	} else {
		keyEscrowPolicyFlagName = fmt.Sprintf("%v.key_escrow_policy", cmdPrefix)
	}

	if err := registerModelKeyEscrowPolicyTypeFlags(depth+1, keyEscrowPolicyFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPrivateKeyAttributesKeyExportable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	keyExportableDescription := ``

	var keyExportableFlagName string
	if cmdPrefix == "" {
		keyExportableFlagName = "key_exportable"
	} else {
		keyExportableFlagName = fmt.Sprintf("%v.key_exportable", cmdPrefix)
	}

	var keyExportableFlagDefault bool

	_ = cmd.PersistentFlags().Bool(keyExportableFlagName, keyExportableFlagDefault, keyExportableDescription)

	return nil
}

func registerPrivateKeyAttributesKeyProtect(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	keyProtectDescription := ``

	var keyProtectFlagName string
	if cmdPrefix == "" {
		keyProtectFlagName = "key_protect"
	} else {
		keyProtectFlagName = fmt.Sprintf("%v.key_protect", cmdPrefix)
	}

	var keyProtectFlagDefault bool

	_ = cmd.PersistentFlags().Bool(keyProtectFlagName, keyProtectFlagDefault, keyProtectDescription)

	return nil
}

func registerPrivateKeyAttributesKeySize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	keySizeDescription := ``

	var keySizeFlagName string
	if cmdPrefix == "" {
		keySizeFlagName = "key_size"
	} else {
		keySizeFlagName = fmt.Sprintf("%v.key_size", cmdPrefix)
	}

	var keySizeFlagDefault int32

	_ = cmd.PersistentFlags().Int32(keySizeFlagName, keySizeFlagDefault, keySizeDescription)

	return nil
}

func registerPrivateKeyAttributesKeySizes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: key_sizes []int32 array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPrivateKeyAttributesFlags(depth int, m *models.PrivateKeyAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, algorithmOidAdded := retrievePrivateKeyAttributesAlgorithmOidFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || algorithmOidAdded

	err, cryptoProvidersAdded := retrievePrivateKeyAttributesCryptoProvidersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cryptoProvidersAdded

	err, keyEscrowPolicyAdded := retrievePrivateKeyAttributesKeyEscrowPolicyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || keyEscrowPolicyAdded

	err, keyExportableAdded := retrievePrivateKeyAttributesKeyExportableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || keyExportableAdded

	err, keyProtectAdded := retrievePrivateKeyAttributesKeyProtectFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || keyProtectAdded

	err, keySizeAdded := retrievePrivateKeyAttributesKeySizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || keySizeAdded

	err, keySizesAdded := retrievePrivateKeyAttributesKeySizesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || keySizesAdded

	return nil, retAdded
}

func retrievePrivateKeyAttributesAlgorithmOidFlags(depth int, m *models.PrivateKeyAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	algorithmOidFlagName := fmt.Sprintf("%v.algorithm_oid", cmdPrefix)
	if cmd.Flags().Changed(algorithmOidFlagName) {

		var algorithmOidFlagName string
		if cmdPrefix == "" {
			algorithmOidFlagName = "algorithm_oid"
		} else {
			algorithmOidFlagName = fmt.Sprintf("%v.algorithm_oid", cmdPrefix)
		}

		algorithmOidFlagValue, err := cmd.Flags().GetString(algorithmOidFlagName)
		if err != nil {
			return err, false
		}
		m.AlgorithmOid = algorithmOidFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePrivateKeyAttributesCryptoProvidersFlags(depth int, m *models.PrivateKeyAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	cryptoProvidersFlagName := fmt.Sprintf("%v.crypto_providers", cmdPrefix)
	if cmd.Flags().Changed(cryptoProvidersFlagName) {
		// info: complex object crypto_providers CryptoProviders is retrieved outside this Changed() block
	}
	cryptoProvidersFlagValue := m.CryptoProviders
	if swag.IsZero(cryptoProvidersFlagValue) {
		cryptoProvidersFlagValue = &models.CryptoProviders{}
	}

	err, cryptoProvidersAdded := retrieveModelCryptoProvidersFlags(depth+1, cryptoProvidersFlagValue, cryptoProvidersFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cryptoProvidersAdded
	if cryptoProvidersAdded {
		m.CryptoProviders = cryptoProvidersFlagValue
	}

	return nil, retAdded
}

func retrievePrivateKeyAttributesKeyEscrowPolicyFlags(depth int, m *models.PrivateKeyAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	keyEscrowPolicyFlagName := fmt.Sprintf("%v.key_escrow_policy", cmdPrefix)
	if cmd.Flags().Changed(keyEscrowPolicyFlagName) {
		// info: complex object key_escrow_policy KeyEscrowPolicyType is retrieved outside this Changed() block
	}
	keyEscrowPolicyFlagValue := m.KeyEscrowPolicy
	if swag.IsZero(keyEscrowPolicyFlagValue) {
		keyEscrowPolicyFlagValue = &models.KeyEscrowPolicyType{}
	}

	err, keyEscrowPolicyAdded := retrieveModelKeyEscrowPolicyTypeFlags(depth+1, keyEscrowPolicyFlagValue, keyEscrowPolicyFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || keyEscrowPolicyAdded
	if keyEscrowPolicyAdded {
		m.KeyEscrowPolicy = keyEscrowPolicyFlagValue
	}

	return nil, retAdded
}

func retrievePrivateKeyAttributesKeyExportableFlags(depth int, m *models.PrivateKeyAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	keyExportableFlagName := fmt.Sprintf("%v.key_exportable", cmdPrefix)
	if cmd.Flags().Changed(keyExportableFlagName) {

		var keyExportableFlagName string
		if cmdPrefix == "" {
			keyExportableFlagName = "key_exportable"
		} else {
			keyExportableFlagName = fmt.Sprintf("%v.key_exportable", cmdPrefix)
		}

		keyExportableFlagValue, err := cmd.Flags().GetBool(keyExportableFlagName)
		if err != nil {
			return err, false
		}
		m.KeyExportable = keyExportableFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePrivateKeyAttributesKeyProtectFlags(depth int, m *models.PrivateKeyAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	keyProtectFlagName := fmt.Sprintf("%v.key_protect", cmdPrefix)
	if cmd.Flags().Changed(keyProtectFlagName) {

		var keyProtectFlagName string
		if cmdPrefix == "" {
			keyProtectFlagName = "key_protect"
		} else {
			keyProtectFlagName = fmt.Sprintf("%v.key_protect", cmdPrefix)
		}

		keyProtectFlagValue, err := cmd.Flags().GetBool(keyProtectFlagName)
		if err != nil {
			return err, false
		}
		m.KeyProtect = keyProtectFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePrivateKeyAttributesKeySizeFlags(depth int, m *models.PrivateKeyAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	keySizeFlagName := fmt.Sprintf("%v.key_size", cmdPrefix)
	if cmd.Flags().Changed(keySizeFlagName) {

		var keySizeFlagName string
		if cmdPrefix == "" {
			keySizeFlagName = "key_size"
		} else {
			keySizeFlagName = fmt.Sprintf("%v.key_size", cmdPrefix)
		}

		keySizeFlagValue, err := cmd.Flags().GetInt32(keySizeFlagName)
		if err != nil {
			return err, false
		}
		m.KeySize = keySizeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePrivateKeyAttributesKeySizesFlags(depth int, m *models.PrivateKeyAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	keySizesFlagName := fmt.Sprintf("%v.key_sizes", cmdPrefix)
	if cmd.Flags().Changed(keySizesFlagName) {
		// warning: key_sizes array type []int32 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
