// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/isometry/go-digicert-mpki/models"
	"github.com/spf13/cobra"
)

// Schema cli for SearchCertificateResponse

// register flags to command
func registerModelSearchCertificateResponseFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSearchCertificateResponseCertificates(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSearchCertificateResponseCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSearchCertificateResponseIndex(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSearchCertificateResponseMoreCertsAvailable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSearchCertificateResponseCertificates(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: certificates []*GetCertificateResponse array type is not supported by go-swagger cli yet

	return nil
}

func registerSearchCertificateResponseCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	countDescription := ``

	var countFlagName string
	if cmdPrefix == "" {
		countFlagName = "count"
	} else {
		countFlagName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var countFlagDefault int32

	_ = cmd.PersistentFlags().Int32(countFlagName, countFlagDefault, countDescription)

	return nil
}

func registerSearchCertificateResponseIndex(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	indexDescription := ``

	var indexFlagName string
	if cmdPrefix == "" {
		indexFlagName = "index"
	} else {
		indexFlagName = fmt.Sprintf("%v.index", cmdPrefix)
	}

	var indexFlagDefault int32

	_ = cmd.PersistentFlags().Int32(indexFlagName, indexFlagDefault, indexDescription)

	return nil
}

func registerSearchCertificateResponseMoreCertsAvailable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	moreCertsAvailableDescription := ``

	var moreCertsAvailableFlagName string
	if cmdPrefix == "" {
		moreCertsAvailableFlagName = "more_certs_available"
	} else {
		moreCertsAvailableFlagName = fmt.Sprintf("%v.more_certs_available", cmdPrefix)
	}

	var moreCertsAvailableFlagDefault bool

	_ = cmd.PersistentFlags().Bool(moreCertsAvailableFlagName, moreCertsAvailableFlagDefault, moreCertsAvailableDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSearchCertificateResponseFlags(depth int, m *models.SearchCertificateResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, certificatesAdded := retrieveSearchCertificateResponseCertificatesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || certificatesAdded

	err, countAdded := retrieveSearchCertificateResponseCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || countAdded

	err, indexAdded := retrieveSearchCertificateResponseIndexFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || indexAdded

	err, moreCertsAvailableAdded := retrieveSearchCertificateResponseMoreCertsAvailableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || moreCertsAvailableAdded

	return nil, retAdded
}

func retrieveSearchCertificateResponseCertificatesFlags(depth int, m *models.SearchCertificateResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	certificatesFlagName := fmt.Sprintf("%v.certificates", cmdPrefix)
	if cmd.Flags().Changed(certificatesFlagName) {
		// warning: certificates array type []*GetCertificateResponse is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveSearchCertificateResponseCountFlags(depth int, m *models.SearchCertificateResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	countFlagName := fmt.Sprintf("%v.count", cmdPrefix)
	if cmd.Flags().Changed(countFlagName) {

		var countFlagName string
		if cmdPrefix == "" {
			countFlagName = "count"
		} else {
			countFlagName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		countFlagValue, err := cmd.Flags().GetInt32(countFlagName)
		if err != nil {
			return err, false
		}
		m.Count = countFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSearchCertificateResponseIndexFlags(depth int, m *models.SearchCertificateResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	indexFlagName := fmt.Sprintf("%v.index", cmdPrefix)
	if cmd.Flags().Changed(indexFlagName) {

		var indexFlagName string
		if cmdPrefix == "" {
			indexFlagName = "index"
		} else {
			indexFlagName = fmt.Sprintf("%v.index", cmdPrefix)
		}

		indexFlagValue, err := cmd.Flags().GetInt32(indexFlagName)
		if err != nil {
			return err, false
		}
		m.Index = indexFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSearchCertificateResponseMoreCertsAvailableFlags(depth int, m *models.SearchCertificateResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	moreCertsAvailableFlagName := fmt.Sprintf("%v.more_certs_available", cmdPrefix)
	if cmd.Flags().Changed(moreCertsAvailableFlagName) {

		var moreCertsAvailableFlagName string
		if cmdPrefix == "" {
			moreCertsAvailableFlagName = "more_certs_available"
		} else {
			moreCertsAvailableFlagName = fmt.Sprintf("%v.more_certs_available", cmdPrefix)
		}

		moreCertsAvailableFlagValue, err := cmd.Flags().GetBool(moreCertsAvailableFlagName)
		if err != nil {
			return err, false
		}
		m.MoreCertsAvailable = moreCertsAvailableFlagValue

		retAdded = true
	}

	return nil, retAdded
}
