// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetProfileResponse GetProfileResponse
//
// swagger:model GetProfileResponse
type GetProfileResponse struct {

	// authentication
	Authentication *Authentication `json:"authentication,omitempty"`

	// certificate
	Certificate *CertificateDetails `json:"certificate,omitempty"`

	// certificate delivery format
	CertificateDeliveryFormat string `json:"certificate_delivery_format,omitempty"`

	// duplicate cert policy
	DuplicateCertPolicy bool `json:"duplicate_cert_policy,omitempty"`

	// enrollment
	Enrollment *Enrollment `json:"enrollment,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// private key attributes
	PrivateKeyAttributes *PrivateKeyAttributes `json:"private_key_attributes,omitempty"`

	// publish to public directory
	PublishToPublicDirectory bool `json:"publish_to_public_directory,omitempty"`

	// renewal period days
	RenewalPeriodDays int32 `json:"renewal_period_days,omitempty"`

	// signature algorithm
	SignatureAlgorithm string `json:"signature_algorithm,omitempty"`

	// status
	Status string `json:"status,omitempty"`
}

// Validate validates this get profile response
func (m *GetProfileResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthentication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertificate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnrollment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivateKeyAttributes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetProfileResponse) validateAuthentication(formats strfmt.Registry) error {
	if swag.IsZero(m.Authentication) { // not required
		return nil
	}

	if m.Authentication != nil {
		if err := m.Authentication.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authentication")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("authentication")
			}
			return err
		}
	}

	return nil
}

func (m *GetProfileResponse) validateCertificate(formats strfmt.Registry) error {
	if swag.IsZero(m.Certificate) { // not required
		return nil
	}

	if m.Certificate != nil {
		if err := m.Certificate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("certificate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("certificate")
			}
			return err
		}
	}

	return nil
}

func (m *GetProfileResponse) validateEnrollment(formats strfmt.Registry) error {
	if swag.IsZero(m.Enrollment) { // not required
		return nil
	}

	if m.Enrollment != nil {
		if err := m.Enrollment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("enrollment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("enrollment")
			}
			return err
		}
	}

	return nil
}

func (m *GetProfileResponse) validatePrivateKeyAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.PrivateKeyAttributes) { // not required
		return nil
	}

	if m.PrivateKeyAttributes != nil {
		if err := m.PrivateKeyAttributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("private_key_attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("private_key_attributes")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get profile response based on the context it is used
func (m *GetProfileResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuthentication(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCertificate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEnrollment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrivateKeyAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetProfileResponse) contextValidateAuthentication(ctx context.Context, formats strfmt.Registry) error {

	if m.Authentication != nil {
		if err := m.Authentication.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authentication")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("authentication")
			}
			return err
		}
	}

	return nil
}

func (m *GetProfileResponse) contextValidateCertificate(ctx context.Context, formats strfmt.Registry) error {

	if m.Certificate != nil {
		if err := m.Certificate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("certificate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("certificate")
			}
			return err
		}
	}

	return nil
}

func (m *GetProfileResponse) contextValidateEnrollment(ctx context.Context, formats strfmt.Registry) error {

	if m.Enrollment != nil {
		if err := m.Enrollment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("enrollment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("enrollment")
			}
			return err
		}
	}

	return nil
}

func (m *GetProfileResponse) contextValidatePrivateKeyAttributes(ctx context.Context, formats strfmt.Registry) error {

	if m.PrivateKeyAttributes != nil {
		if err := m.PrivateKeyAttributes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("private_key_attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("private_key_attributes")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetProfileResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetProfileResponse) UnmarshalBinary(b []byte) error {
	var res GetProfileResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
