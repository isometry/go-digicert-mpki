// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SanAttributes SanAttributes
//
// swagger:model SanAttributes
type SanAttributes struct {

	// custom attributes
	CustomAttributes map[string]string `json:"custom_attributes,omitempty"`

	// directory name
	DirectoryName string `json:"directory_name,omitempty"`

	// dns name
	DNSName []*Attribute `json:"dns_name"`

	// ip address
	IPAddress []*Attribute `json:"ip_address"`

	// other name
	OtherName []*Attribute `json:"other_name"`

	// registered id
	RegisteredID []*Attribute `json:"registered_id"`

	// rfc822 name
	Rfc822Name []*Attribute `json:"rfc822_name"`

	// user principal name
	UserPrincipalName []*Attribute `json:"user_principal_name"`
}

// Validate validates this san attributes
func (m *SanAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDNSName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRfc822Name(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserPrincipalName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SanAttributes) validateDNSName(formats strfmt.Registry) error {
	if swag.IsZero(m.DNSName) { // not required
		return nil
	}

	for i := 0; i < len(m.DNSName); i++ {
		if swag.IsZero(m.DNSName[i]) { // not required
			continue
		}

		if m.DNSName[i] != nil {
			if err := m.DNSName[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dns_name" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dns_name" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SanAttributes) validateIPAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.IPAddress) { // not required
		return nil
	}

	for i := 0; i < len(m.IPAddress); i++ {
		if swag.IsZero(m.IPAddress[i]) { // not required
			continue
		}

		if m.IPAddress[i] != nil {
			if err := m.IPAddress[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ip_address" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ip_address" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SanAttributes) validateOtherName(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherName) { // not required
		return nil
	}

	for i := 0; i < len(m.OtherName); i++ {
		if swag.IsZero(m.OtherName[i]) { // not required
			continue
		}

		if m.OtherName[i] != nil {
			if err := m.OtherName[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("other_name" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("other_name" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SanAttributes) validateRegisteredID(formats strfmt.Registry) error {
	if swag.IsZero(m.RegisteredID) { // not required
		return nil
	}

	for i := 0; i < len(m.RegisteredID); i++ {
		if swag.IsZero(m.RegisteredID[i]) { // not required
			continue
		}

		if m.RegisteredID[i] != nil {
			if err := m.RegisteredID[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("registered_id" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("registered_id" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SanAttributes) validateRfc822Name(formats strfmt.Registry) error {
	if swag.IsZero(m.Rfc822Name) { // not required
		return nil
	}

	for i := 0; i < len(m.Rfc822Name); i++ {
		if swag.IsZero(m.Rfc822Name[i]) { // not required
			continue
		}

		if m.Rfc822Name[i] != nil {
			if err := m.Rfc822Name[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rfc822_name" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rfc822_name" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SanAttributes) validateUserPrincipalName(formats strfmt.Registry) error {
	if swag.IsZero(m.UserPrincipalName) { // not required
		return nil
	}

	for i := 0; i < len(m.UserPrincipalName); i++ {
		if swag.IsZero(m.UserPrincipalName[i]) { // not required
			continue
		}

		if m.UserPrincipalName[i] != nil {
			if err := m.UserPrincipalName[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("user_principal_name" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("user_principal_name" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this san attributes based on the context it is used
func (m *SanAttributes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDNSName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIPAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegisteredID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRfc822Name(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserPrincipalName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SanAttributes) contextValidateDNSName(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DNSName); i++ {

		if m.DNSName[i] != nil {
			if err := m.DNSName[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dns_name" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dns_name" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SanAttributes) contextValidateIPAddress(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IPAddress); i++ {

		if m.IPAddress[i] != nil {
			if err := m.IPAddress[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ip_address" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ip_address" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SanAttributes) contextValidateOtherName(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OtherName); i++ {

		if m.OtherName[i] != nil {
			if err := m.OtherName[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("other_name" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("other_name" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SanAttributes) contextValidateRegisteredID(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RegisteredID); i++ {

		if m.RegisteredID[i] != nil {
			if err := m.RegisteredID[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("registered_id" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("registered_id" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SanAttributes) contextValidateRfc822Name(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Rfc822Name); i++ {

		if m.Rfc822Name[i] != nil {
			if err := m.Rfc822Name[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rfc822_name" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rfc822_name" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SanAttributes) contextValidateUserPrincipalName(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UserPrincipalName); i++ {

		if m.UserPrincipalName[i] != nil {
			if err := m.UserPrincipalName[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("user_principal_name" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("user_principal_name" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SanAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SanAttributes) UnmarshalBinary(b []byte) error {
	var res SanAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
