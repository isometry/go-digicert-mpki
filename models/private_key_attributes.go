// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PrivateKeyAttributes PrivateKeyAttributes
//
// swagger:model PrivateKeyAttributes
type PrivateKeyAttributes struct {

	// algorithm oid
	AlgorithmOid string `json:"algorithm_oid,omitempty"`

	// crypto providers
	CryptoProviders *CryptoProviders `json:"crypto_providers,omitempty"`

	// key escrow policy
	KeyEscrowPolicy *KeyEscrowPolicyType `json:"key_escrow_policy,omitempty"`

	// key exportable
	KeyExportable bool `json:"key_exportable,omitempty"`

	// key protect
	KeyProtect bool `json:"key_protect,omitempty"`

	// key size
	KeySize int32 `json:"key_size,omitempty"`

	// key sizes
	KeySizes []int32 `json:"key_sizes"`
}

// Validate validates this private key attributes
func (m *PrivateKeyAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCryptoProviders(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeyEscrowPolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateKeyAttributes) validateCryptoProviders(formats strfmt.Registry) error {
	if swag.IsZero(m.CryptoProviders) { // not required
		return nil
	}

	if m.CryptoProviders != nil {
		if err := m.CryptoProviders.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("crypto_providers")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("crypto_providers")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateKeyAttributes) validateKeyEscrowPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.KeyEscrowPolicy) { // not required
		return nil
	}

	if m.KeyEscrowPolicy != nil {
		if err := m.KeyEscrowPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("key_escrow_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("key_escrow_policy")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this private key attributes based on the context it is used
func (m *PrivateKeyAttributes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCryptoProviders(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKeyEscrowPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateKeyAttributes) contextValidateCryptoProviders(ctx context.Context, formats strfmt.Registry) error {

	if m.CryptoProviders != nil {
		if err := m.CryptoProviders.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("crypto_providers")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("crypto_providers")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateKeyAttributes) contextValidateKeyEscrowPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.KeyEscrowPolicy != nil {
		if err := m.KeyEscrowPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("key_escrow_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("key_escrow_policy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrivateKeyAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrivateKeyAttributes) UnmarshalBinary(b []byte) error {
	var res PrivateKeyAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
