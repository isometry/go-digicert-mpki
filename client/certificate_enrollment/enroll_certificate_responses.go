// Code generated by go-swagger; DO NOT EDIT.

package certificate_enrollment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/isometry/go-digicert-mpki/models"
)

// EnrollCertificateReader is a Reader for the EnrollCertificate structure.
type EnrollCertificateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EnrollCertificateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEnrollCertificateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewEnrollCertificateCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewEnrollCertificateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewEnrollCertificateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewEnrollCertificateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewEnrollCertificateOK creates a EnrollCertificateOK with default headers values
func NewEnrollCertificateOK() *EnrollCertificateOK {
	return &EnrollCertificateOK{}
}

/* EnrollCertificateOK describes a response with status code 200, with default header values.

OK
*/
type EnrollCertificateOK struct {
	Payload models.Response
}

func (o *EnrollCertificateOK) Error() string {
	return fmt.Sprintf("[POST /api/v1/certificate][%d] enrollCertificateOK  %+v", 200, o.Payload)
}
func (o *EnrollCertificateOK) GetPayload() models.Response {
	return o.Payload
}

func (o *EnrollCertificateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnrollCertificateCreated creates a EnrollCertificateCreated with default headers values
func NewEnrollCertificateCreated() *EnrollCertificateCreated {
	return &EnrollCertificateCreated{}
}

/* EnrollCertificateCreated describes a response with status code 201, with default header values.

Created
*/
type EnrollCertificateCreated struct {
}

func (o *EnrollCertificateCreated) Error() string {
	return fmt.Sprintf("[POST /api/v1/certificate][%d] enrollCertificateCreated ", 201)
}

func (o *EnrollCertificateCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEnrollCertificateUnauthorized creates a EnrollCertificateUnauthorized with default headers values
func NewEnrollCertificateUnauthorized() *EnrollCertificateUnauthorized {
	return &EnrollCertificateUnauthorized{}
}

/* EnrollCertificateUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type EnrollCertificateUnauthorized struct {
}

func (o *EnrollCertificateUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v1/certificate][%d] enrollCertificateUnauthorized ", 401)
}

func (o *EnrollCertificateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEnrollCertificateForbidden creates a EnrollCertificateForbidden with default headers values
func NewEnrollCertificateForbidden() *EnrollCertificateForbidden {
	return &EnrollCertificateForbidden{}
}

/* EnrollCertificateForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type EnrollCertificateForbidden struct {
}

func (o *EnrollCertificateForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v1/certificate][%d] enrollCertificateForbidden ", 403)
}

func (o *EnrollCertificateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEnrollCertificateNotFound creates a EnrollCertificateNotFound with default headers values
func NewEnrollCertificateNotFound() *EnrollCertificateNotFound {
	return &EnrollCertificateNotFound{}
}

/* EnrollCertificateNotFound describes a response with status code 404, with default header values.

Not Found
*/
type EnrollCertificateNotFound struct {
}

func (o *EnrollCertificateNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v1/certificate][%d] enrollCertificateNotFound ", 404)
}

func (o *EnrollCertificateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
