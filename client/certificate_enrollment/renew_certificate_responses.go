// Code generated by go-swagger; DO NOT EDIT.

package certificate_enrollment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/isometry/go-digicert-mpki/models"
)

// RenewCertificateReader is a Reader for the RenewCertificate structure.
type RenewCertificateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RenewCertificateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRenewCertificateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewRenewCertificateCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewRenewCertificateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRenewCertificateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRenewCertificateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRenewCertificateOK creates a RenewCertificateOK with default headers values
func NewRenewCertificateOK() *RenewCertificateOK {
	return &RenewCertificateOK{}
}

/* RenewCertificateOK describes a response with status code 200, with default header values.

OK
*/
type RenewCertificateOK struct {
	Payload models.Response
}

func (o *RenewCertificateOK) Error() string {
	return fmt.Sprintf("[POST /api/v1/certificate/{serialNumber}/renew][%d] renewCertificateOK  %+v", 200, o.Payload)
}
func (o *RenewCertificateOK) GetPayload() models.Response {
	return o.Payload
}

func (o *RenewCertificateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRenewCertificateCreated creates a RenewCertificateCreated with default headers values
func NewRenewCertificateCreated() *RenewCertificateCreated {
	return &RenewCertificateCreated{}
}

/* RenewCertificateCreated describes a response with status code 201, with default header values.

Created
*/
type RenewCertificateCreated struct {
}

func (o *RenewCertificateCreated) Error() string {
	return fmt.Sprintf("[POST /api/v1/certificate/{serialNumber}/renew][%d] renewCertificateCreated ", 201)
}

func (o *RenewCertificateCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRenewCertificateUnauthorized creates a RenewCertificateUnauthorized with default headers values
func NewRenewCertificateUnauthorized() *RenewCertificateUnauthorized {
	return &RenewCertificateUnauthorized{}
}

/* RenewCertificateUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type RenewCertificateUnauthorized struct {
}

func (o *RenewCertificateUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v1/certificate/{serialNumber}/renew][%d] renewCertificateUnauthorized ", 401)
}

func (o *RenewCertificateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRenewCertificateForbidden creates a RenewCertificateForbidden with default headers values
func NewRenewCertificateForbidden() *RenewCertificateForbidden {
	return &RenewCertificateForbidden{}
}

/* RenewCertificateForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type RenewCertificateForbidden struct {
}

func (o *RenewCertificateForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v1/certificate/{serialNumber}/renew][%d] renewCertificateForbidden ", 403)
}

func (o *RenewCertificateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRenewCertificateNotFound creates a RenewCertificateNotFound with default headers values
func NewRenewCertificateNotFound() *RenewCertificateNotFound {
	return &RenewCertificateNotFound{}
}

/* RenewCertificateNotFound describes a response with status code 404, with default header values.

Not Found
*/
type RenewCertificateNotFound struct {
}

func (o *RenewCertificateNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v1/certificate/{serialNumber}/renew][%d] renewCertificateNotFound ", 404)
}

func (o *RenewCertificateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
