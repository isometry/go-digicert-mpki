// Code generated by go-swagger; DO NOT EDIT.

package certificate_enrollment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/isometry/go-digicert-mpki/models"
)

// GetCertificateReader is a Reader for the GetCertificate structure.
type GetCertificateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCertificateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCertificateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetCertificateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetCertificateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetCertificateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetCertificateOK creates a GetCertificateOK with default headers values
func NewGetCertificateOK() *GetCertificateOK {
	return &GetCertificateOK{}
}

/* GetCertificateOK describes a response with status code 200, with default header values.

OK
*/
type GetCertificateOK struct {
	Payload models.Response
}

func (o *GetCertificateOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/certificate/{serialNumber}][%d] getCertificateOK  %+v", 200, o.Payload)
}
func (o *GetCertificateOK) GetPayload() models.Response {
	return o.Payload
}

func (o *GetCertificateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCertificateUnauthorized creates a GetCertificateUnauthorized with default headers values
func NewGetCertificateUnauthorized() *GetCertificateUnauthorized {
	return &GetCertificateUnauthorized{}
}

/* GetCertificateUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetCertificateUnauthorized struct {
}

func (o *GetCertificateUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1/certificate/{serialNumber}][%d] getCertificateUnauthorized ", 401)
}

func (o *GetCertificateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetCertificateForbidden creates a GetCertificateForbidden with default headers values
func NewGetCertificateForbidden() *GetCertificateForbidden {
	return &GetCertificateForbidden{}
}

/* GetCertificateForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetCertificateForbidden struct {
}

func (o *GetCertificateForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1/certificate/{serialNumber}][%d] getCertificateForbidden ", 403)
}

func (o *GetCertificateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetCertificateNotFound creates a GetCertificateNotFound with default headers values
func NewGetCertificateNotFound() *GetCertificateNotFound {
	return &GetCertificateNotFound{}
}

/* GetCertificateNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetCertificateNotFound struct {
}

func (o *GetCertificateNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/certificate/{serialNumber}][%d] getCertificateNotFound ", 404)
}

func (o *GetCertificateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
