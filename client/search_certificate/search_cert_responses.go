// Code generated by go-swagger; DO NOT EDIT.

package search_certificate

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/isometry/go-digicert-mpki/models"
)

// SearchCertReader is a Reader for the SearchCert structure.
type SearchCertReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SearchCertReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSearchCertOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewSearchCertCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSearchCertBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSearchCertUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSearchCertForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSearchCertNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSearchCertInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSearchCertOK creates a SearchCertOK with default headers values
func NewSearchCertOK() *SearchCertOK {
	return &SearchCertOK{}
}

/* SearchCertOK describes a response with status code 200, with default header values.

Certificate search result
*/
type SearchCertOK struct {
	Payload *models.SearchCertificateResponse
}

func (o *SearchCertOK) Error() string {
	return fmt.Sprintf("[POST /api/v1/searchcert][%d] searchCertOK  %+v", 200, o.Payload)
}
func (o *SearchCertOK) GetPayload() *models.SearchCertificateResponse {
	return o.Payload
}

func (o *SearchCertOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SearchCertificateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchCertCreated creates a SearchCertCreated with default headers values
func NewSearchCertCreated() *SearchCertCreated {
	return &SearchCertCreated{}
}

/* SearchCertCreated describes a response with status code 201, with default header values.

Created
*/
type SearchCertCreated struct {
}

func (o *SearchCertCreated) Error() string {
	return fmt.Sprintf("[POST /api/v1/searchcert][%d] searchCertCreated ", 201)
}

func (o *SearchCertCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSearchCertBadRequest creates a SearchCertBadRequest with default headers values
func NewSearchCertBadRequest() *SearchCertBadRequest {
	return &SearchCertBadRequest{}
}

/* SearchCertBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type SearchCertBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *SearchCertBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v1/searchcert][%d] searchCertBadRequest  %+v", 400, o.Payload)
}
func (o *SearchCertBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *SearchCertBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchCertUnauthorized creates a SearchCertUnauthorized with default headers values
func NewSearchCertUnauthorized() *SearchCertUnauthorized {
	return &SearchCertUnauthorized{}
}

/* SearchCertUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type SearchCertUnauthorized struct {
}

func (o *SearchCertUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v1/searchcert][%d] searchCertUnauthorized ", 401)
}

func (o *SearchCertUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSearchCertForbidden creates a SearchCertForbidden with default headers values
func NewSearchCertForbidden() *SearchCertForbidden {
	return &SearchCertForbidden{}
}

/* SearchCertForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type SearchCertForbidden struct {
}

func (o *SearchCertForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v1/searchcert][%d] searchCertForbidden ", 403)
}

func (o *SearchCertForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSearchCertNotFound creates a SearchCertNotFound with default headers values
func NewSearchCertNotFound() *SearchCertNotFound {
	return &SearchCertNotFound{}
}

/* SearchCertNotFound describes a response with status code 404, with default header values.

Not Found
*/
type SearchCertNotFound struct {
	Payload *models.ErrorResponse
}

func (o *SearchCertNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v1/searchcert][%d] searchCertNotFound  %+v", 404, o.Payload)
}
func (o *SearchCertNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *SearchCertNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchCertInternalServerError creates a SearchCertInternalServerError with default headers values
func NewSearchCertInternalServerError() *SearchCertInternalServerError {
	return &SearchCertInternalServerError{}
}

/* SearchCertInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type SearchCertInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *SearchCertInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v1/searchcert][%d] searchCertInternalServerError  %+v", 500, o.Payload)
}
func (o *SearchCertInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *SearchCertInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
