// Code generated by go-swagger; DO NOT EDIT.

package seat_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new seat management API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for seat management API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateSeat(params *CreateSeatParams, opts ...ClientOption) (*CreateSeatCreated, error)

	DeleteSeat(params *DeleteSeatParams, opts ...ClientOption) (*DeleteSeatOK, *DeleteSeatNoContent, error)

	GetSeat(params *GetSeatParams, opts ...ClientOption) (*GetSeatOK, error)

	UpdateSeat(params *UpdateSeatParams, opts ...ClientOption) (*UpdateSeatOK, *UpdateSeatCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateSeat this API is used to create a seat this seat can be used for a user device server or organization seat pool
*/
func (a *Client) CreateSeat(params *CreateSeatParams, opts ...ClientOption) (*CreateSeatCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSeatParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createSeat",
		Method:             "POST",
		PathPattern:        "/api/v1/seat",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSeatReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSeatCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createSeat: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteSeat this API is used to delete a seat deleting a seat will revoke all the certificates associated to the specified seat
*/
func (a *Client) DeleteSeat(params *DeleteSeatParams, opts ...ClientOption) (*DeleteSeatOK, *DeleteSeatNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSeatParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteSeat",
		Method:             "DELETE",
		PathPattern:        "/api/v1/seat/{seatId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSeatReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteSeatOK:
		return value, nil, nil
	case *DeleteSeatNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for seat_management: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSeat this API is used to get information regarding a seat
*/
func (a *Client) GetSeat(params *GetSeatParams, opts ...ClientOption) (*GetSeatOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSeatParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSeat",
		Method:             "GET",
		PathPattern:        "/api/v1/seat/{seatId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSeatReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSeatOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSeat: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateSeat this API is used to change the seat details
*/
func (a *Client) UpdateSeat(params *UpdateSeatParams, opts ...ClientOption) (*UpdateSeatOK, *UpdateSeatCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSeatParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateSeat",
		Method:             "PUT",
		PathPattern:        "/api/v1/seat/{seatId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSeatReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateSeatOK:
		return value, nil, nil
	case *UpdateSeatCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for seat_management: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
