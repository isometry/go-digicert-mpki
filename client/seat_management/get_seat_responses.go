// Code generated by go-swagger; DO NOT EDIT.

package seat_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/isometry/go-digicert-mpki/models"
)

// GetSeatReader is a Reader for the GetSeat structure.
type GetSeatReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSeatReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSeatOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetSeatUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetSeatForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSeatNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetSeatOK creates a GetSeatOK with default headers values
func NewGetSeatOK() *GetSeatOK {
	return &GetSeatOK{}
}

/* GetSeatOK describes a response with status code 200, with default header values.

OK
*/
type GetSeatOK struct {
	Payload models.Response
}

func (o *GetSeatOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/seat/{seatId}][%d] getSeatOK  %+v", 200, o.Payload)
}
func (o *GetSeatOK) GetPayload() models.Response {
	return o.Payload
}

func (o *GetSeatOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSeatUnauthorized creates a GetSeatUnauthorized with default headers values
func NewGetSeatUnauthorized() *GetSeatUnauthorized {
	return &GetSeatUnauthorized{}
}

/* GetSeatUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetSeatUnauthorized struct {
}

func (o *GetSeatUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1/seat/{seatId}][%d] getSeatUnauthorized ", 401)
}

func (o *GetSeatUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSeatForbidden creates a GetSeatForbidden with default headers values
func NewGetSeatForbidden() *GetSeatForbidden {
	return &GetSeatForbidden{}
}

/* GetSeatForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetSeatForbidden struct {
}

func (o *GetSeatForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1/seat/{seatId}][%d] getSeatForbidden ", 403)
}

func (o *GetSeatForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSeatNotFound creates a GetSeatNotFound with default headers values
func NewGetSeatNotFound() *GetSeatNotFound {
	return &GetSeatNotFound{}
}

/* GetSeatNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetSeatNotFound struct {
}

func (o *GetSeatNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/seat/{seatId}][%d] getSeatNotFound ", 404)
}

func (o *GetSeatNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
