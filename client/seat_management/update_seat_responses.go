// Code generated by go-swagger; DO NOT EDIT.

package seat_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/isometry/go-digicert-mpki/models"
)

// UpdateSeatReader is a Reader for the UpdateSeat structure.
type UpdateSeatReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateSeatReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateSeatOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewUpdateSeatCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateSeatUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateSeatForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateSeatNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateSeatOK creates a UpdateSeatOK with default headers values
func NewUpdateSeatOK() *UpdateSeatOK {
	return &UpdateSeatOK{}
}

/* UpdateSeatOK describes a response with status code 200, with default header values.

OK
*/
type UpdateSeatOK struct {
	Payload models.Response
}

func (o *UpdateSeatOK) Error() string {
	return fmt.Sprintf("[PUT /api/v1/seat/{seatId}][%d] updateSeatOK  %+v", 200, o.Payload)
}
func (o *UpdateSeatOK) GetPayload() models.Response {
	return o.Payload
}

func (o *UpdateSeatOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSeatCreated creates a UpdateSeatCreated with default headers values
func NewUpdateSeatCreated() *UpdateSeatCreated {
	return &UpdateSeatCreated{}
}

/* UpdateSeatCreated describes a response with status code 201, with default header values.

Created
*/
type UpdateSeatCreated struct {
}

func (o *UpdateSeatCreated) Error() string {
	return fmt.Sprintf("[PUT /api/v1/seat/{seatId}][%d] updateSeatCreated ", 201)
}

func (o *UpdateSeatCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateSeatUnauthorized creates a UpdateSeatUnauthorized with default headers values
func NewUpdateSeatUnauthorized() *UpdateSeatUnauthorized {
	return &UpdateSeatUnauthorized{}
}

/* UpdateSeatUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateSeatUnauthorized struct {
}

func (o *UpdateSeatUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v1/seat/{seatId}][%d] updateSeatUnauthorized ", 401)
}

func (o *UpdateSeatUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateSeatForbidden creates a UpdateSeatForbidden with default headers values
func NewUpdateSeatForbidden() *UpdateSeatForbidden {
	return &UpdateSeatForbidden{}
}

/* UpdateSeatForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateSeatForbidden struct {
}

func (o *UpdateSeatForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v1/seat/{seatId}][%d] updateSeatForbidden ", 403)
}

func (o *UpdateSeatForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateSeatNotFound creates a UpdateSeatNotFound with default headers values
func NewUpdateSeatNotFound() *UpdateSeatNotFound {
	return &UpdateSeatNotFound{}
}

/* UpdateSeatNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateSeatNotFound struct {
}

func (o *UpdateSeatNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v1/seat/{seatId}][%d] updateSeatNotFound ", 404)
}

func (o *UpdateSeatNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
