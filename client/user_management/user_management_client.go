// Code generated by go-swagger; DO NOT EDIT.

package user_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new user management API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for user management API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreatePasscode(params *CreatePasscodeParams, opts ...ClientOption) (*CreatePasscodeCreated, error)

	DeleteEnrollment(params *DeleteEnrollmentParams, opts ...ClientOption) (*DeleteEnrollmentOK, *DeleteEnrollmentNoContent, error)

	GetEnrollment(params *GetEnrollmentParams, opts ...ClientOption) (*GetEnrollmentOK, error)

	ResetPasscode(params *ResetPasscodeParams, opts ...ClientOption) (*ResetPasscodeOK, *ResetPasscodeCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreatePasscode this API is used to enroll user for profile
*/
func (a *Client) CreatePasscode(params *CreatePasscodeParams, opts ...ClientOption) (*CreatePasscodeCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePasscodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createPasscode",
		Method:             "POST",
		PathPattern:        "/api/v1/enrollment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreatePasscodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePasscodeCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createPasscode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteEnrollment this API can delete an enrollment for given enrollment id
*/
func (a *Client) DeleteEnrollment(params *DeleteEnrollmentParams, opts ...ClientOption) (*DeleteEnrollmentOK, *DeleteEnrollmentNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEnrollmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteEnrollment",
		Method:             "DELETE",
		PathPattern:        "/api/v1/enrollment/{enrollCode}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteEnrollmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteEnrollmentOK:
		return value, nil, nil
	case *DeleteEnrollmentNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for user_management: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEnrollment this API is used to get details of an existing enrollment
*/
func (a *Client) GetEnrollment(params *GetEnrollmentParams, opts ...ClientOption) (*GetEnrollmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEnrollmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getEnrollment",
		Method:             "GET",
		PathPattern:        "/api/v1/enrollment/{enrollCode}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEnrollmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEnrollmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEnrollment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ResetPasscode this API is used to reset enrollment code
*/
func (a *Client) ResetPasscode(params *ResetPasscodeParams, opts ...ClientOption) (*ResetPasscodeOK, *ResetPasscodeCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResetPasscodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "resetPasscode",
		Method:             "PUT",
		PathPattern:        "/api/v1/enrollment/{enrollCode}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResetPasscodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ResetPasscodeOK:
		return value, nil, nil
	case *ResetPasscodeCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for user_management: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
